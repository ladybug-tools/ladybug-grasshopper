{
  "version": "1.6.3", 
  "nickname": "PMV Polygon", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "total_comfort", 
        "description": "The percent of the data on the psychrometric chart that\nare inside all comfort and passive strategy polygons.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "total_comf_data", 
        "description": "Data collection or a 0/1 value noting whether each of the data\npoints on the psychrometric chart lies inside of a comfort polygon\nor a strategy polygon.\n_\nThis can be connected to the \"LB Create Legend\" component to generate\na list of colors that can be used to color the points output from\n\"LB Psychrometric Chart\" component to see exactly which points are\ncomfortable and which are not.\n_\nValues are one of the following:\n0 = uncomfortable\n1 = comfortable", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "polygon_names", 
        "description": "A list of names for each of the polygons. This will include both the\ncomfort polygons and the passive strategy polygons. The order of these\nnames correspondsto the total_strategies and strategies_data outputs.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "polygon_comfort", 
        "description": "The percent of the input data that are in each of the comfort\nor passive strategy polygons. Each number here corresponds to the names\nin the polygon_names output above.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "polygon_data", 
        "description": "A list of data collections or 0/1 values indicating whether each \nof the data points on the psychrometric chart lies inside each of\nthe comfort or a strategy polygons. Each data collection or here corresponds\nto the names in the polygon_names output above.\n_\nValues are one of the following:\n0 = uncomfortable\n1 = comfortable", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "comfort_poly", 
        "description": "Brep representing the range of comfort for the input mrt, air speed,\nmetabolic rate and clothing level. If multiple values have been\ninput, multiple polygons will be output here.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "strategy_poly", 
        "description": "Brep representing the area of the chart made comfortable by any\ninput passive strategies. If multiple strategies have been input to\nthe strategies_ input, multiple polygons will be output here.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_psych_chart", 
      "description": "A hourly, daily, or sub-hourly data collection of temperature values\nor a single temperature value in Celcius to be used for the whole\nanalysis. If this input data collection is in in Farenheit, the\nentire chart will be drawn using IP units. Operative temperature\nshould be used if it is available. Otherwise, air temperature\n(aka. dry bulb temperature) is suitable.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_mrt_", 
      "description": "A number or list of numbers for the mean radiant temperature. These\nshould be in Celsius if the Psychrometric Chart is in SI and\nFarenheit if the Psychrometric Chart is in IP. If None, a polygon for\noperative temperature will be plot, assuming that radiant temperature\nand air temperature are the same. (Default: None).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_air_speed_", 
      "description": "A number or list of numbers for the air speed values in m/s. If None, a\nlow air speed of 0.1 m/s wil be used for all polygons. (Default: None).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_met_rate_", 
      "description": "A number or list of numbers for the metabolic rate in met. If None, a met\nrate of 1.1 met will be used for all polygons, indicating a human\nsubject who is seated, typing. (Default: None).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_clothing_", 
      "description": "A number or list of numbers for the clothing level in clo. If None, a clo\nlevel of 0.7 clo will be used for all polygons, indicating a human\nsubject with a long sleeve shirt and pants. (Default: None).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "pmv_par_", 
      "description": "Optional PMVParameter object to specify parameters under\nwhich conditions are considered acceptable. If None, default will\nassume a PPD threshold of 10%, no absolute humidity constraints\nand a still air threshold of 0.1 m/s.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "merge_poly_", 
      "description": "Boolean to note whether all comfort polygons should be merged\ninto a single polygon instead of separate polygons for each set of\ninput conditions. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "strategies_", 
      "description": "An optional text input of passive strategies to be plot on the\npsychrometric chart as polygons.  It is recommended that the\n\"LB Passive Strategy\" component be used to select which polygons\nto plot.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "strategy_par_", 
      "description": "Optional passive strategy parameters from the \"LB Passive Strategy\nParameters\" component. This can be used to adjust various inputs\nused to generate strategy polygons including the maximum comfortable\nair speed, the building balance temperature, and the temperature\nlimits for thermal mass and night flushing.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "solar_data_", 
      "description": "An annual hourly continuous data collection of irradiance\n(or radiation) in W/m2 (or Wh/m2) that aligns with the data\npoints on the psychrometric chart. This is only required when\nplotting a \"Passive Solar Heating\" strategy polygon on the chart.\nThe irradiance values should be incident on the orientation of\nthe passive solar heated windows. So using global horizontal\nradiation assumes that all windows are skylights (like a\ngreenhouse). The \"LB Directional Irradiance\" component can be\nused to get irradiance data for a specific surface orientation.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Visualize Data", 
  "code": "\ntry:\n    from ladybug.psychchart import PsychrometricChart\n    from ladybug.datacollection import BaseCollection\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_comfort.chart.polygonpmv import PolygonPMV\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_comfort:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import tolerance\n    from ladybug_{{cad}}.fromgeometry import from_polyline2d_to_offset_brep\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, \\\n        list_to_data_tree, give_warning, de_objectify_output\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef strategy_warning(polygon_name):\n    \"\"\"Give a warning about a polygon not fitting on the chart.\"\"\"\n    msg = 'Polygon \"{}\" could not fit on the chart given the current location of ' \\\n        'the comfort polygon(s).\\nTry moving the comfort polygon(s) by changing ' \\\n        'its criteria to see the missing polygon.'.format(polygon_name)\n    give_warning(ghenv.Component, msg)\n    print(msg)\n\n\ndef process_polygon(polygon_name, polygon):\n    \"\"\"Process a strategy polygon that does not require any special treatment.\"\"\"\n    if polygon is not None:\n        polygon_names.append(polygon_name)\n        strategy_poly.append(from_polyline2d_to_offset_brep(polygon, offset, z))\n        dat = poly_obj.evaluate_polygon(polygon, tolerance)\n        dat = dat[0] if len(dat) == 1 else poly_obj.create_collection(dat, polygon_name)\n        polygon_data.append(dat)\n    else:\n        strategy_warning(polygon_name)\n\n\ndef merge_polygon_data(poly_data):\n    \"\"\"Merge an array of polygon comfort conditions into a single data list.\"\"\"\n    val_mtx = [dat.values for dat in poly_data]\n    merged_values = []\n    for hr_data in zip(*val_mtx):\n        hr_val = 1 if 1 in hr_data else 0\n        merged_values.append(hr_val)\n    return merged_values\n\n\nif all_required_inputs(ghenv.Component):\n    # unpack any passive strategy parameters\n    if strategy_par_ is None:\n        day_above, night_below, fan_spd, bal_temp, solar_cap, tim_c = \\\n            (12.0, 3.0, 1.0, 12.8, 50.0, 8)\n    else:\n        day_above, night_below, fan_spd, bal_temp, solar_cap, tim_c = \\\n            de_objectify_output(strategy_par_)\n\n    # convert the temperature values to C if the polygon is in IP\n    assert isinstance(_psych_chart, PsychrometricChart), 'PolygonPMV ' \\\n        'psychrometric chart must be a ladybug PsychrometricChart. ' \\\n        'Got {}.'.format(type(_psych_chart))\n    z = _psych_chart.z\n    offset = _psych_chart.x_dim * 0.25\n    if _psych_chart.use_ip:\n        _mrt_ = PolygonPMV.TEMP_TYPE.to_unit(_mrt_, 'C', 'F')\n\n    # create the PolygonPMV object\n    poly_obj = PolygonPMV(_psych_chart, _mrt_, _air_speed_, _met_rate_, _clothing_,\n                          comfort_parameter=pmv_par_)\n\n    # draw the comfort polygon\n    polygon_names = []\n    polygon_data = []\n    if merge_poly_:\n        comfort_poly = from_polyline2d_to_offset_brep(\n            poly_obj.merged_comfort_polygon, offset, z)\n        polygon_data.append(poly_obj.merged_comfort_data)\n        polygon_names.append('Comfort')\n    else:\n        comfort_poly = [from_polyline2d_to_offset_brep(poly, offset, z)\n                        for poly in poly_obj.comfort_polygons]\n        polygon_data.extend(poly_obj.comfort_data)\n        if len(comfort_poly) == 1:\n            polygon_names.append('Comfort')\n        else:\n            names = ('Comfort {}'.format(i + 1) for i in range(len(comfort_poly)))\n            polygon_names.extend(names)\n\n    # draw passive strategies if requested\n    if len(strategies_) != 0:\n        strategy_poly = []\n        if 'Evaporative Cooling' in strategies_:\n            ec_poly = poly_obj.evaporative_cooling_polygon()\n            process_polygon('Evaporative Cooling', ec_poly)\n        if 'Mass + Night Vent' in strategies_:\n            nf_poly = poly_obj.night_flush_polygon(day_above)\n            p_name = 'Mass + Night Vent'\n            if nf_poly is not None:\n                polygon_names.append(p_name)\n                strategy_poly.append(from_polyline2d_to_offset_brep(nf_poly, offset, z))\n                dat = poly_obj.evaluate_night_flush_polygon(\n                    nf_poly, _psych_chart.original_temperature, night_below, tim_c, tolerance)\n                dat = dat[0] if len(dat) == 1 else poly_obj.create_collection(dat, p_name)\n                polygon_data.append(dat)\n            else:\n                strategy_warning(p_name)\n        if 'Occupant Use of Fans' in strategies_:\n            fan_poly = poly_obj.fan_use_polygon(fan_spd)\n            process_polygon('Occupant Use of Fans', fan_poly)\n        if 'Capture Internal Heat' in strategies_:\n            iht_poly = poly_obj.internal_heat_polygon(bal_temp)\n            process_polygon('Capture Internal Heat', iht_poly)\n        if 'Passive Solar Heating' in strategies_:\n            p_name = 'Passive Solar Heating'\n            if solar_data_ is None:\n                msg = 'In order to plot a \"{}\" polygon, solar_data_ ' \\\n                    'must be plugged into this component.'.format(p_name)\n                print(msg)\n                give_warning(ghenv.Component, msg)\n            else:\n                bal_t = bal_temp if 'Capture Internal Heat' in strategies_ else None\n                dat, delta = poly_obj.evaluate_passive_solar(\n                    solar_data_, solar_cap, tim_c, bal_t)\n                sol_poly = poly_obj.passive_solar_polygon(delta, bal_t)\n                if sol_poly is not None:\n                    polygon_names.append(p_name)\n                    strategy_poly.append(from_polyline2d_to_offset_brep(sol_poly, offset, z))\n                    dat = dat[0] if len(dat) == 1 else poly_obj.create_collection(dat, p_name)\n                    polygon_data.append(dat)\n                else:\n                    strategy_warning(p_name)\n\n    # compute total comfort values\n    polygon_comfort = [dat.average * 100 for dat in polygon_data] if \\\n        isinstance(polygon_data[0], BaseCollection) else \\\n        [dat * 100 for dat in polygon_data]\n    if isinstance(polygon_data[0], BaseCollection):\n        merged_vals = merge_polygon_data(polygon_data)\n        total_comf_data = poly_obj.create_collection(merged_vals, 'Total Comfort')\n        total_comfort = total_comf_data.average * 100\n    else:\n        total_comf_data = 1 if sum(polygon_data) > 0 else 0\n        total_comfort = total_comf_data * 100\n", 
  "category": "Ladybug", 
  "name": "LB PMV Polygon", 
  "description": "Draw thermal comfort polygons on a Psychrometric Chart using the PMV model for\nindoor thermal comfort.\n_\nThis component can also plot passive strategy polygons on the psychrometric chart\nand can compute the number of hours that lie inside each of the comfort / strategy\npolygons.\n-"
}
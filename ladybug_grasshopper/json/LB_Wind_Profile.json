{
  "version": "1.5.0", 
  "nickname": "WindProfile", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "wind_speeds", 
        "description": "A list of wind speeds in [m/s] that correspond to the wind\nvectors slong the height of the wind profile visualization.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "wind_vectors", 
        "description": "A list of vectors that built the profile. Note that the\nmagnitude of these vectors is scaled based on the _vec_scale_\ninput and a _vec_scale_ of 1 will make the magnitude of the\nvector equal to the wind speed in [m/s].", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "anchor_pts", 
        "description": "A list of anchor points for each of the vectors above, which\ncorrespond to the height above the ground for each of the vectors.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh_arrows", 
        "description": "A list of colored mesh objects that represent the wind speeds\nalong the height of the wind profile.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "profile_curve", 
        "description": "A curve outlining the wind speed as it changes with height.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "speed_axis", 
        "description": "A list of line segments and text objects that that mark the X axis,\nwhich realtes to the wind speed in (m/s).", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "height_axis", 
        "description": "A list of line segments and text objects that that mark the Y axis,\nwhich realtes to the the height above the ground in Rhino model units.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "A legend for the colored mesh_arrows, which notes their speed.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the global_title.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "vis_set", 
        "description": "An object containing VisualizationSet arguments for drawing a detailed\nversion of the Wind Profile in the Rhino scene. This can be connected to\nthe \"LB Preview Visualization Set\" component to display this version\nof the Wind Profile in Rhino.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "north_", 
      "description": "A number between -360 and 360 for the counterclockwise\ndifference between the North and the positive Y-axis in degrees.\n90 is West and 270 is East. This can also be Vector for the\ndirection to North. (Default: 0)", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_met_wind_vel", 
      "description": "A data collection of meteorological wind speed measured at\nthe _met_height_ with the _met_terrian [m/s]. Typically, this comes\nfrom the \"LB Import EPW\" component. This can also be a single number\nfor the meteorological wind speed in m/s.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "met_wind_dir_", 
      "description": "An optional number between 0 and 360 representing the degrees\nfrom north that the meteorological wind is blowing. 0 = North,\n90 = East, 180 = South, 270 = West. This can also a data collection\nof meteorological wind directions. in which case the wind profile\nwill be oriented towards the prevailing wind (unless a profile_dir_\nis connected). When unspecified, the wind profile is simply drawn\nin the XY plane.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "profile_dir_", 
      "description": "An optional text string representing the cardinal direction that\nthe wind profile represents. This input only has an effect when a\ndata collection is connected for met_wind_dir_. It will be used\nto draw a wind profile for only the hours of the data collection\nwhere the wind is blowing in the specified direction. This can also\nbe an integer that codes for a particular orientation. Choose from\nthe following.\n_\n0 = N\n1 = NE\n2 = E\n3 = SE\n4 = S\n5 = SW\n6 = W\n7 = NW", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_terrain_", 
      "description": "Text string that sets the terrain class associated with the wind profile.\nThis can also be an integer that codes for the terrain. (Default: city).\nMust be one the following.\n_\n0 = city - 50% of buildings above 21m over a distance of at least 2000m upwind.\n1 = suburban - suburbs, wooded areas.\n2 = country - open, with scattered objects generally less than 10m high.\n3 = water - flat areas downwind of a large water body (max 500m inland).", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_met_height_", 
      "description": "A number for the height above the ground at which the meteorological\nwind speed is measured in meters. (Default: 10 meters, which is the\nstandard used by most airports and EPW files).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_met_terrain_", 
      "description": "Text string that sets the terrain class associated with the\nmeteorological wind speed. This can also be an integer that codes\nfor the terrain. (Default: country, which is typical of most\nairports where wind measurements are taken). Must be one the following.\n_\n0 = city - 50% of buildings above 21m over a distance of at least 2000m upwind.\n1 = suburban - suburbs, wooded areas.\n2 = country - open, with scattered objects generally less than 10m high.\n3 = water - flat areas downwind of a large water body (max 500m inland).", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "log_law_", 
      "description": "A boolean to note whether the wind profile should use a logarithmic\nlaw to determine wind speeds instead of the default power law,\nwhich is used by EnergyPlus. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_base_pt_", 
      "description": "A point that sets the ground level frm which the wind profile is\ndrawn. By default, the profile is generated at the scene origin.", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_max_speed_", 
      "description": "Script variable WindProfile", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_profile_height_", 
      "description": "A number in meters to specify the maximum height of the\nwind profile. (Default: 30 meters).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_vec_spacing_", 
      "description": "A number in meters to specify the difference in height between\neach of the mesh arrows. (Default 2 meters).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_vec_scale_", 
      "description": "A number to denote the length dimension of a 1 m/s wind vector\nin meters. This can be used to change the scale of the wind\nvector meshes in relation to the height of the wind profile\ncurve. (Default: 5 meters).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "An optional LegendParameter object to change the display of the\nwind profile.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Analyze Data", 
  "code": "\nimport math\n\ntry:\n    from ladybug_geometry.geometry2d import Vector2D\n    from ladybug_geometry.geometry3d import Point3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug.datatype.speed import WindSpeed\n    from ladybug.datacollection import BaseCollection\n    from ladybug.graphic import GraphicContainer\n    from ladybug.windprofile import WindProfile\n    from ladybug.windrose import WindRose\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.togeometry import to_point3d, to_vector2d\n    from ladybug_{{cad}}.fromgeometry import from_point3d, from_vector3d, \\\n        from_mesh3d, from_linesegment3d, from_polyline3d\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\n    from ladybug_{{cad}}.config import conversion_to_meters, units_system\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# dictionary to map integers to terrain types\nTERRAIN_TYPES = {\n    '0': 'city',\n    '1': 'suburban',\n    '2': 'country',\n    '3': 'water',\n    'city': 'city',\n    'suburban': 'suburban',\n    'country': 'country',\n    'water': 'water'\n}\n\n# dictionary to map integers to cardinal directions\nDIR_TEXT = {\n    '0': 'N', '1': 'NE', '2': 'E', '3': 'SE', '4': 'S', '5': 'SW', '6': 'W', '7': 'NW',\n    'N': 'N', 'NE': 'NE', 'E': 'E', 'SE': 'SE', 'S': 'S', 'SW': 'SW', 'W': 'W', 'NW': 'NW'\n}\nDIR_RANGE = {\n    'N': (337.5, 22.5), 'NE': (22.5, 67.5), 'E': (67.5, 112.5), 'SE': (112.5, 157.5),\n    'S': (157.5, 202.5), 'SW': (202.5, 247.5), 'W': (247.5, 292.5), 'NW': (292.5, 337.5)\n}\n\n\nif all_required_inputs(ghenv.Component):\n    # interpret the model units\n    scale_fac = 1 / conversion_to_meters()\n    unit_sys = units_system()\n\n    # set default values\n    if north_ is not None:  # process the north_\n        try:\n            north_ = math.degrees(\n                to_vector2d(north_).angle_clockwise(Vector2D(0, 1)))\n        except AttributeError:  # north angle instead of vector\n            north_ = float(north_)\n    else:\n        north_ = 0\n    _terrain_ = 'city' if _terrain_ is None else TERRAIN_TYPES[_terrain_.lower()]\n    _met_height_ = 10 if _met_height_ is None else _met_height_\n    _met_terrain_ = 'country' if _met_terrain_ is None \\\n        else TERRAIN_TYPES[_met_terrain_.lower()]\n    log_law_ = False if log_law_ is None else log_law_\n    bp = Point3D(0, 0, 0) if _base_pt_ is None else to_point3d(_base_pt_)\n    if unit_sys in ('Feet', 'Inches'):\n        _profile_height_ = 30.48 if _profile_height_ is None else _profile_height_\n        _vec_spacing_ = 3.048 if _vec_spacing_ is None else _vec_spacing_\n        feet_labels = True\n    else:\n        _profile_height_ = 30 if _profile_height_ is None else _profile_height_\n        _vec_spacing_ = 2 if _vec_spacing_ is None else _vec_spacing_\n        feet_labels = False\n    _vec_scale_ = 5 if _vec_scale_ is None else _vec_scale_\n    len_d, height_d = _vec_scale_, _vec_scale_ / 5\n\n    # process the data collections and wind direction if reuqested\n    if isinstance(met_wind_dir_, BaseCollection):\n        if profile_dir_ is not None:\n            dir_label = DIR_TEXT[profile_dir_]\n            dir_txt = '\\nWind Direction = {}'.format(dir_label)\n        else:  # get the prevailing wind direction\n            prev_dir = WindRose.prevailing_direction_from_data(met_wind_dir_, 8)[0]\n            dir_label = DIR_TEXT[str(int(prev_dir / 45))]\n            dir_txt = '\\nPrevailing Wind Direction = {}'.format(dir_label)\n        dir_range = DIR_RANGE[dir_label]\n        met_wd = sum(dir_range) / 2 if dir_range != (337.5, 22.5) else 0\n        if isinstance(_met_wind_vel, BaseCollection):\n            lw, hg = dir_range\n            if dir_range == (337.5, 22.5):\n                pattern = [lw < v or v < hg for v in met_wind_dir_]\n            else:\n                pattern = [lw < v < hg for v in met_wind_dir_]\n            _met_wind_vel = _met_wind_vel.filter_by_pattern(pattern)\n    else:\n        met_wd = float(met_wind_dir_) if met_wind_dir_ is not None else None\n        dir_txt = '\\nWind Direction = {} degrees'.format(int(met_wd)) \\\n            if met_wind_dir_ is not None else ''\n    if isinstance(_met_wind_vel, BaseCollection):\n        met_ws = _met_wind_vel.average\n        head = _met_wind_vel.header\n        loc_txt = '{} Terrain'.format(_terrain_.title()) if 'city' not in head.metadata \\\n            else '{} - {} Terrain'.format(head.metadata['city'], _terrain_.title())\n        title_txt = '{}{}\\nAverage Met Wind Speed = {} m/s'.format(\n            loc_txt, dir_txt, round(met_ws, 2))\n    else:\n        met_ws = float(_met_wind_vel)\n        title_txt = '{} Terrain{}\\nMeteorological Speed = {} m/s'.format(\n            _terrain_.title(), dir_txt, round(met_ws, 2))\n    if met_wd is not None and north_ != 0:\n        met_wd = met_wd - north_\n\n    # create the wind profile and the graphic container\n    profile = WindProfile(_terrain_, _met_terrain_, _met_height_, log_law_)\n    _, mesh_ars, wind_speeds, wind_vectors, anchor_pts = \\\n        profile.mesh_arrow_profile(\n            met_ws, _profile_height_, _vec_spacing_, met_wd, bp,\n            len_d, height_d, scale_fac)\n    profile_polyline, _, _ = profile.profile_polyline3d(\n            met_ws, _profile_height_, 0.1,\n            met_wd, bp, len_d, scale_fac)\n    max_speed = round(wind_speeds[-1]) if _max_speed_ is None else _max_speed_\n    max_pt = Point3D(bp.x + ((max_speed + 2) * len_d * scale_fac),\n                     bp.y + (30 * scale_fac), bp.z)\n    graphic = GraphicContainer(\n        wind_speeds, bp, max_pt, legend_par_, WindSpeed(), 'm/s')\n\n    # draw profile geometry and mesh arrows in the scene\n    mesh_arrows = []\n    for mesh, col in zip(mesh_ars, graphic.value_colors):\n        mesh.colors = [col] * len(mesh)\n        mesh_arrows.append(from_mesh3d(mesh))\n    profile_curve = from_polyline3d(profile_polyline)\n\n    # draw axes and legend in the scene\n    txt_h = graphic.legend_parameters.text_height\n    axis_line, axis_arrow, axis_ticks, text_planes, text = \\\n        profile.speed_axis(max_speed, met_wd, bp, len_d, scale_fac, txt_h)\n    speed_axis = [from_linesegment3d(axis_line), from_mesh3d(axis_arrow)]\n    for tic in axis_ticks:\n        speed_axis.append(from_linesegment3d(tic))\n    for i, (pl, txt) in enumerate(zip(text_planes, text)):\n        txt_i_h = txt_h if i != len(text) - 1 else txt_h * 1.25\n        txt_obj = text_objects(txt, pl, txt_i_h, graphic.legend_parameters.font, 1, 0)\n        speed_axis.append(txt_obj)\n    axis_line, axis_arrow, axis_ticks, text_planes, text = \\\n        profile.height_axis(_profile_height_, _vec_spacing_ * 2, met_wd, bp,\n                            scale_fac, txt_h, feet_labels)\n    height_axis = [from_linesegment3d(axis_line), from_mesh3d(axis_arrow)]\n    for tic in axis_ticks:\n        height_axis.append(from_linesegment3d(tic))\n    for i, (pl, txt) in enumerate(zip(text_planes, text)):\n        if i != len(text) - 1:\n            txt_i_h, ha, va = txt_h, 2, 3\n        else:\n            txt_i_h, ha, va = txt_h * 1.25, 1, 5\n        txt_obj = text_objects(txt, pl, txt_i_h, graphic.legend_parameters.font, ha, va)\n        height_axis.append(txt_obj)\n    \n    # draw the legend and the title\n    if graphic.legend_parameters.is_base_plane_default:\n        graphic.legend_parameters.base_plane = \\\n            profile.legend_plane(max_speed, met_wd, bp, len_d, scale_fac)\n    legend = legend_objects(graphic.legend)\n    title_pl = profile.title_plane(met_wd, bp, len_d, scale_fac, txt_h)\n    title = text_objects(title_txt, title_pl, txt_h, graphic.legend_parameters.font, 0, 0)\n\n    # process the output lists of data\n    anchor_pts = [from_point3d(pt) for pt in anchor_pts]\n    wind_vectors = [from_vector3d(vec) for vec in wind_vectors]\n    wind_speeds.insert(0, 0)  # insert 0 wind speed for bottom of curve\n", 
  "category": "Ladybug", 
  "name": "LB Wind Profile", 
  "description": "Visualize a wind profile curve for a given terrain type.\n_\nWind profiles assist with understanding how wind speed decreases as one approaches\nthe ground or increases as one leaves the ground. \n_\nBy default, the wind profile output by this component will be an average over the\n_met_wind_vel data collection (or it can be for a single meteorological wind\nvelocity for point-in-time studies).\n_\nIf a met_wind_dir_ data collection is connected, the wind profile will point in\nthe direction of prevailing wind direction by default. A profile_dir_ can then\nbe connected to understand the average wind profile from a specific cardinal\ndirection (eg. NE).\n-"
}
{
  "version": "0.2.3", 
  "nickname": "Sunpath", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "vectors", 
        "description": "Vector(s) indicating the direction of sunlight for each sun\nposition on the sun path. Note that these vectors point downwards\ntowards the ground.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "altitudes", 
        "description": "Number(s) indicating the sun altitude(s) in degrees for\neach sun position on the sun path.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "azimuths", 
        "description": "Number(s) indicating the sun azimuths in degrees for each\nsun position on the sun path.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "hoys", 
        "description": "The hour of the year for each sun positions on the sun path.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "sun_pts", 
        "description": "Point(s) representing the location of the sun on the sunpath.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "analemma", 
        "description": "A set of curves that mark the hourly positions of the sun\nthroughout the different months of the year.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "daily", 
        "description": "A set of arcs that mark the path of the sun across the sky\ndome over the course of a day.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "compass", 
        "description": "A set of circles, lines and text objects that mark the cardinal\ndirections in relation to the sun path.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "Geometry representing the legend for the input data_. Will be None\nif no _data is connected.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the title of the sunpath.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "color_pts", 
        "description": "A list of points colored with the input data_, which will display\nin the Rhino scene in accordance with the legend. Note that\nthe text representation of these objects bears the RGB color of each\npoint. So casting this output to text and then to a color will\nyeild color objects that can be used for previewing other types\nof geometry with the input data_. Will be None if no _data is connected.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "north_", 
      "description": "A number between -360 and 360 for the counterclockwise\ndifference between the North and the positive Y-axis in degrees.\n90 is West and 270 is East. This can also be Vector for the\ndirection to North. (Default: 0)", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_location", 
      "description": "A ladybug Location that has been output from the \"LB Import EPW\"\ncomponent or the \"LB Construct Location\" component.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "hoys_", 
      "description": "A number or list of numbers between 0 and 8760 that respresent the\nhour of the year at which to evaluate the sun position. The\n\"LB Calculate HOY\" component can output this number given a month,\nday and hour. The \"LB Analysis Period\" component can output a\nlist of HOYs within a certain hour or date range.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "dl_saving_", 
      "description": "An optional analysis period for daylight saving time.\nIf None, no daylight saving time will be used. (Default: None)", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "solar_time_", 
      "description": "A boolean to indicate if the input hours should be treated\nas solar time instead of standard or daylight time. (Default: False)", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_center_pt_", 
      "description": "A point for the center of the sun path. (Default: (0, 0, 0))", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_scale_", 
      "description": "A number to set the scale of the sun path. The default is 1,\nwhich corresponds to a radius of 100 meters in the current Rhino\nmodel's unit system.", 
      "type": "double", 
      "default": 1
    }, 
    {
      "access": "item", 
      "name": "projection_", 
      "description": "Optional text for the name of a projection to use from the sky\ndome hemisphere to the 2D plane. If None, a 3D sun path will be drawn\ninstead of a 2D one. (Default: None) Choose from the following:\n* Orthographic\n* Stereographic", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "daily_", 
      "description": "Boolean to note whether the sunpath should display only one daily\narc for each unique day in the input hoys_ (True) or whther the\noutput sun path geometry should be for the entire year, complete\nwith analemmas for all sun-up hours and a daily arc for each\nmonth (False). (Default: False)", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "data_", 
      "description": "Optional HourlyContinuousCollection objects, which will be used\nto generate colors that align with each of the sun_pts. This data\ncan also be used along with the statement_ below to select out\nsun positions that meet certain conditions.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "statement_", 
      "description": "A conditional statement as a string (e.g. a > 25).\n.\nThe variable of the first data collection should always be named 'a'\n(without quotations), the variable of the second list should be\nnamed 'b', and so on.\n.\nFor example, if three data collections are connected to _data\nand the following statement is applied:\n'18 < a < 26 and b < 80 and c > 2'\nThe resulting collections will only include values where the first\ndata collection is between 18 and 26, the second collection is less\nthan 80 and the third collection is greater than 2.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "An optional LegendParameter object to change the display\nof the data on the sun path (Default: None).", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Visualize Data", 
  "code": "\ntry:\n    from ladybug_geometry.geometry2d.pointvector import Vector2D, Point2D\n    from ladybug_geometry.geometry3d.pointvector import Point3D, Vector3D\n    from ladybug_geometry.geometry3d.plane import Plane\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug.sunpath import Sunpath\n    from ladybug.compass import Compass\n    from ladybug.graphic import GraphicContainer\n    from ladybug.datacollection import HourlyContinuousCollection\n    from ladybug.dt import Date\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.color import color_to_color\n    from ladybug_{{cad}}.colorize import ColoredPoint\n    from ladybug_{{cad}}.fromgeometry import from_polyline3d, from_polyline2d, \\\n        from_arc3d, from_vector3d, from_point3d, from_point2d\n    from ladybug_{{cad}}.fromobjects import legend_objects, compass_objects\n    from ladybug_{{cad}}.togeometry import to_vector2d, to_point2d, to_point3d\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree, \\\n        hide_output, show_output, schedule_solution\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\nimport math\n\n\ndef draw_analemma_and_arcs(sp, datetimes, radius, center_pt3d):\n    \"\"\"Draw analemma and day arc {{Cad}} geometry.\n\n    Args:\n        sp: Sunpath object for which geometry will be drawn.\n        datetimes: A list of datetimes, which will be used to get days\n            if daily_ is True.\n        radius: Number for the radius of the sun path.\n        center_pt3d: Point3D for the center of the sun path.\n\n    Returns:\n        analemma: List of {{Cad}} curves for the analemmas\n        daily: List of {{Cad}} curves for the daily arcs.\n    \"\"\"\n    sp.daylight_saving_period = None  # set here so analemmas aren't messed up\n\n    center_pt, z = Point2D(center_pt3d.x, center_pt3d.y), center_pt3d.z\n    if not daily_:\n        if projection_ is None:\n            analemma = [from_polyline3d(pline) for pline in sp.hourly_analemma_polyline3d(\n                center_pt3d, radius, True, solar_time_)]\n            daily = [from_arc3d(arc) for arc in sp.monthly_day_arc3d(center_pt3d, radius)]\n        else:\n            analemma = [from_polyline2d(pline, z) for pline in sp.hourly_analemma_polyline2d(\n                projection_, center_pt, radius, True, solar_time_)]\n            daily = [from_polyline2d(arc, z) for arc in sp.monthly_day_polyline2d(\n                projection_, center_pt3d, radius)]\n    else:\n        analemma = []  # No Analemmas for a daily sun path\n        doys = set(dt.doy for dt in datetimes)\n        dates = [Date.from_doy(doy) for doy in doys]\n        if projection_ is None:\n            daily = [from_arc3d(sp.day_arc3d(dat.month, dat.day, center_pt3d, radius))\n                     for dat in dates]\n        else:\n            daily = []\n            for dat in dates:\n                pline = sp.day_polyline2d(dat.month, dat.day, projection_, center_pt, radius)\n                daily.append(from_polyline2d(pline, z))\n    return analemma, daily\n\n\ndef draw_sun_positions(suns, radius, center_pt3d):\n    \"\"\"Draw {{Cad}} points from a list of sun objects.\n\n    Args:\n        suns: A list of suns to be output as points\n        radius: Number for the radius of the sun path.\n        center_pt3d: Point3D for the center of the sun path.\n\n    Returns:\n        A list of {{Cad}} points for sun positions\n    \"\"\"\n        # get points for sun positions\n    if projection_ is None:\n        return [from_point3d(sun.position_3d(center_pt3d, radius)) for sun in suns]\n    else:\n        return [from_point2d(sun.position_2d(projection_, center_pt3d, radius), z)\n                for sun in suns]\n\n\ndef title_text(data_col):\n    \"\"\"Get a text string for the title of the sunpath.\"\"\"\n    title_array = ['{} ({})'.format(data_col.header.data_type,\n                                    data_col.header.unit)]\n    for key, val in data_col.header.metadata.items():\n        title_array.append('{}: {}'.format(key, val))\n    return '\\n'.join(title_array)\n\n\nif all_required_inputs(ghenv.Component):\n    # process all of the global inputs for the sunpath\n    if north_ is not None:  # process the north_\n        try:\n            north_ = math.degrees(\n                to_vector2d(north_).angle_clockwise(Vector2D(0, 1)))\n        except AttributeError:  # north angle instead of vector\n            north_ = float(north_)\n    else:\n        north_ = 0\n    if _center_pt_ is not None:  # process the center point into a Point2D\n        center_pt, center_pt3d = to_point2d(_center_pt_), to_point3d(_center_pt_)\n        z = center_pt3d.z\n    else:\n        center_pt, center_pt3d = Point2D(), Point3D()\n        z = 0\n    _scale_ = 1 if _scale_ is None else _scale_ # process the scale into a radius\n    radius = (100 * _scale_) / conversion_to_meters()\n    solar_time_ = False if solar_time_ is None else solar_time_  # process solat time\n\n    # create a intersection of the input hoys_ and the data hoys\n    if len(data_) > 0 and len(hoys_) > 0:\n        all_aligned = all(data_[0].is_collection_aligned(d) for d in data_[1:])\n        assert all_aligned, 'All collections input to data_ must be aligned for ' \\\n            'each Sunpath.\\nGrafting the data_ and suplying multiple grafted ' \\\n            '_center_pt_ can be used to view each data on its own path.'\n        if statement_ is not None:\n            data_ = HourlyContinuousCollection.filter_collections_by_statement(\n                data_, statement_)\n        data_hoys = set(dt.hoy for dt in data_[0].datetimes)\n        hoys_ = list(data_hoys.intersection(set(hoys_)))\n\n    # initialize sunpath based on location\n    sp = Sunpath.from_location(_location, north_, dl_saving_)\n\n    # process all of the input hoys into altitudes, azimuths and vectors\n    altitudes = []\n    azimuths = []\n    datetimes = []\n    moys = []\n    hoys = []\n    vectors = []\n    suns = []\n    for hoy in hoys_:\n        sun = sp.calculate_sun_from_hoy(hoy, solar_time_)\n        if sun.is_during_day:\n            altitudes.append(sun.altitude)\n            azimuths.append(sun.azimuth)\n            datetimes.append(sun.datetime)\n            moys.append(sun.datetime.moy)\n            hoys.append(sun.datetime.hoy)\n            vectors.append(from_vector3d(sun.sun_vector))\n            suns.append(sun)\n\n    if len(data_) > 0 and len(hoys_) > 0:  # build a sunpath for each data collection\n        new_data = []\n        title = []\n        all_sun_pts = []\n        all_analemma = []\n        all_daily = []\n        all_compass = []\n        all_colors = []\n        all_col_pts = []\n        all_legends = []\n        for i, data in enumerate(data_):\n            # move the center point so sun paths are not on top of one another\n            fac = i* radius * 3\n            center_pt_i = Point2D(center_pt.x + fac, center_pt.y)\n            center_pt3d_i = Point3D(center_pt3d.x + fac, center_pt3d.y, center_pt3d.z)\n\n            # create the ladybug compass object\n            lb_compass = Compass(radius, center_pt_i, north_)\n\n            # create a graphic container to generate colors and legends\n            n_data = data.filter_by_moys(moys)  # filter data collection by sun-up hours\n            graphic = GraphicContainer(\n                n_data.values, lb_compass.min_point3d(z), lb_compass.max_point3d(z),\n                legend_par_, n_data.header.data_type, n_data.header.unit)\n            all_legends.append(legend_objects(graphic.legend))\n            title.append(text_objects(\n                title_text(n_data), graphic.lower_title_location,\n                graphic.legend_parameters.text_height, graphic.legend_parameters.font))\n\n            # create points, analemmas, daily arcs, and compass geometry\n            sun_pts_init = draw_sun_positions(suns, radius, center_pt3d_i)\n            analemma_i, daily_i = draw_analemma_and_arcs(sp, datetimes, radius, center_pt3d_i)\n            compass_i = compass_objects(lb_compass, z, None, projection_,\n                                        graphic.legend_parameters.font)\n            all_analemma.append(analemma_i)\n            all_daily.append(daily_i)\n            all_compass.append(compass_i)\n\n            # produce a visualization of colored points\n            cols = [color_to_color(col) for col in graphic.value_colors]\n            col_pts = []\n            for pt, col in zip(sun_pts_init, cols):\n                col_pt = ColoredPoint(pt)\n                col_pt.color = col\n                col_pts.append(col_pt)\n            all_sun_pts.append(sun_pts_init)\n            all_col_pts.append(col_pts)\n\n        # convert all nested lists to data trees\n        sun_pts = list_to_data_tree(all_sun_pts)\n        analemma = list_to_data_tree(all_analemma)\n        daily = list_to_data_tree(all_daily)\n        compass = list_to_data_tree(all_compass)\n        legend = list_to_data_tree(all_legends)\n\n        # do some acrobatics to get the colored points to display\n        # CWM: I don't know why we have to re-schedule the solution but this is the\n        # only way I found to get the colored points to appear (redraw did not work).\n        color_pts = list_to_data_tree(all_col_pts)\n        hide_output(ghenv.Component, 5)\n        schedule_solution(ghenv.Component, 2)\n    else:  # no data connected; just output one sunpath\n        sun_pts = draw_sun_positions(suns, radius, center_pt3d)\n        analemma, daily = draw_analemma_and_arcs(sp, datetimes, radius, center_pt3d)\n        font = legend_par_.font if legend_par_ is not None else 'Arial'\n        compass = compass_objects(Compass(radius, center_pt, north_), z, None, projection_, font)\n        if _location.city:\n            title = text_objects(\n                'city: {}'.format(_location.city),\n                Plane(o=center_pt3d.move(Vector3D(-radius * 1.25, -radius * 1.25))),\n                radius / 15, font)\n        show_output(ghenv.Component, 5)\n", 
  "category": "Ladybug", 
  "name": "LB SunPath", 
  "description": "Output a Sunpath (aka. sun plot) graphic into the Rhino scene.\n-\nThe component also outputs sun vectors that can be used for solar access\nanalysis and shading design.\n-"
}
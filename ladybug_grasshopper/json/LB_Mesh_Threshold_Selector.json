{
  "version": "1.7.0", 
  "nickname": "MeshSelector", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "total_value", 
        "description": "The sum of each value that meets the criteria multiplied by the\ncorresponding mesh face area. This can generally be used to\nunderstand how much value is captured according to the conditional\ncritera. For example, if the input _mesh is a radiation study,\nthis is equal to the total radiation falling on the sub_mesh.\nThis may or may not be meaningful depending on the units of the\nconnected _values. This output will always be zero for cases\nwhere values correspond to mesh vertices and not faces.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "total_area", 
        "description": "The area of the sub_mesh that meets the criteria.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "sub_mesh", 
        "description": "A new mesh with the faces or vertices removed to reveal just the portion\nthat satisfies the conditional criteria. By default, this is hidden\nto that just the outline appears in the geometry preview.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "outline", 
        "description": "A set of lines outlining the portion of the mesh that is above\nthe threshold.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_values", 
      "description": "A list of numbers that correspond to either the number of faces\nor vertices of the _mesh.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_mesh", 
      "description": "The mesh from which a sub-region will be selected. This is typically\na colored mesh output from a study.", 
      "type": "Mesh", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_operator_", 
      "description": "A text string representing an operator for the the conditional statement. \nThe default is greater than (>).  This must be an operator in python\nand examples include the following:\n* > - Greater Than\n* < - Less Than\n* >= - Greater or Equal\n* <= - Less or Equal\n* == - Equals\n* != - Does not Equal", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_pct_threshold_", 
      "description": "A number between 0 and 100 that represents the percentage\nof the mesh faces or vertices to be included in the resulting\nsub_mesh. (Default: 25%).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "abs_threshold_", 
      "description": "An optional number that represents the absolute threshold above\nwhich a given mesh face or vertex is included in the resulting\nsub_mesh. An input here will override the percent threshold input\nabove.", 
      "type": "double", 
      "default": null
    }
  ], 
  "subcategory": "4 :: Extra", 
  "code": "\ntry:\n    from ladybug_{{cad}}.togeometry import to_mesh3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d_to_outline\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, hide_output\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # check the input values and provide defaults\n    lb_mesh = to_mesh3d(_mesh)\n    val_count = len(_values)\n    face_match = val_count == len(lb_mesh.faces)\n    assert face_match or val_count == len(lb_mesh.vertices), \\\n        'Number of _values ({}) must match the number of mesh faces ({}) or ' \\\n        'the number of mesh vertices ({}).'.format(\n            val_count, len(lb_mesh.faces), len(lb_mesh.faces))\n    fract_thresh = 0.25 if _pct_threshold_ is None else _pct_threshold_ / 100\n    operator = '>' if _operator_ is None else _operator_.strip()\n    if operator in ('==', '!='):\n        assert abs_threshold_ is not None, 'An abs_threshold_ must be ' \\\n            'specified to use the \"{}\" operator.'.format(operator)\n\n    # get a list of boolean values that meet the conditional criteria\n    if abs_threshold_ is not None:\n        statement = '{} ' + operator + str(abs_threshold_)\n        pattern = []\n        for val in _values:\n            pattern.append(eval(statement.format(val), {}))\n    else:\n        pattern = [False] * val_count\n        target_count = int(fract_thresh * (val_count))\n        face_i_sort = [x for (y, x) in sorted(zip(_values, range(val_count)))]\n        rel_values = list(reversed(face_i_sort)) if '>' in operator else face_i_sort\n        for cnt in rel_values[:target_count]:\n            pattern[cnt] = True\n\n    # remove the faces or vertices from the mesh and compute the outputs\n    sub_mesh_lb, vf_pattern = lb_mesh.remove_faces(pattern) if face_match else \\\n        lb_mesh.remove_vertices(pattern)\n    total_value, total_area = 0, 0\n    if face_match:\n        for incl, val, area in zip(pattern, _values, lb_mesh.face_areas):\n            if incl:\n                total_area += area\n                total_value += val * area\n    else:\n        total_area = sub_mesh_lb.area\n\n    # convert everything to {{Cad}} geometry\n    sub_mesh, outline = from_mesh3d_to_outline(sub_mesh_lb)\n    hide_output(ghenv.Component, 3)", 
  "category": "Ladybug", 
  "name": "LB Mesh Threshold Selector", 
  "description": "Select a sub-region of a mesh using aligned values and conditional criteria.\n_\nThis has multiple uses and can be applied to any study that outputs a list of\nresults that are aligned with a mesh. For example, quantifying the daylit area\nfrom a daylight analysis, selecting the portion of a roof with enough solar\nradiation for photovoltaic panels, etc.\n-"
}
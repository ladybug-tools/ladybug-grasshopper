{
  "version": "0.2.2", 
  "nickname": "HourlyPlot", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "mesh", 
        "description": "A colored mesh derived from the input _data. Multiple meshes will\nbe output for several data collections are input.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "Geometry representing the legend for each mesh.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "borders", 
        "description": "A list of lines and polylines representing different time\nintervals of the plot.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "labels", 
        "description": "A list of text objects that label the borders with the time\nintervals that they demarcate.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the global_title.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_data", 
      "description": "A HourlyContinuousCollection or HourlyDiscontinuousCollection\nwhich will be used to generate the hourly plot.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_base_pt_", 
      "description": "An optional Point3D to be used as a starting point to generate\nthe geometry of the plot (Default: (0, 0, 0)).", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_x_dim_", 
      "description": "A number to set the X dimension of the mesh cells (Default: 1 meters).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_y_dim_", 
      "description": "A number to set the Y dimension of the mesh cells (Default: 4 meters).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_z_dim_", 
      "description": "A number to set the Z dimension of the entire chart. This will\nbe used to make the colored_mesh3d of the chart vary in the Z\ndimension according to the data. The value input here should usually be\nseveral times larger than the x_dim or y_dim in order to be noticable\n(e.g. 100). If 0, the colored_mesh3d will simply be flat. (Default: 0).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "reverse_y_", 
      "description": "Boolean to note whether the Y-axis of the chart is reversed\nIf True, time over the course of the day will flow from the top of\nthe chart to the bottom instead of the bottom to the top.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "legend_par_", 
      "description": "An optional LegendParameter object to change the display\nof the HourlyPlot (Default: None).", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "statement_", 
      "description": "A conditional statement as a string (e.g. a > 25).\n.\nThe variable of the first data collection should always be named 'a'\n(without quotations), the variable of the second list should be\nnamed 'b', and so on.\n.\nFor example, if three data collections are connected to _data\nand the following statement is applied:\n'18 < a < 26 and b < 80 and c > 2'\nThe resulting collections will only include values where the first\ndata collection is between 18 and 26, the second collection is less\nthan 80 and the third collection is greater than 2.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "period_", 
      "description": "A Ladybug analysis period to be applied to all of the input _data.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Visualize Data", 
  "code": "\ntry:\n    from ladybug.datacollection import HourlyContinuousCollection\n    from ladybug.hourlyplot import HourlyPlot\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_geometry.geometry3d.pointvector import Point3D\n    from ladybug_geometry.geometry3d.plane import Plane\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.togeometry import to_point3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_mesh2d, \\\n        from_polyline2d, from_linesegment2d\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # apply any analysis periods and conditional statements to the input collections\n    if period_ is not None:\n        _data = [coll.filter_by_analysis_period(period_) for coll in _data]\n    if statement_ is not None:\n        _data = HourlyContinuousCollection.filter_collections_by_statement(\n            _data, statement_)\n\n    # set default values for the chart dimensions\n    _base_pt_ = to_point3d(_base_pt_) if _base_pt_ is not None else Point3D()\n    _x_dim_ = _x_dim_ if _x_dim_ is not None else 1.0 / conversion_to_meters()\n    _y_dim_ = _y_dim_ if _y_dim_ is not None else 4.0 / conversion_to_meters()\n    _z_dim_ = _z_dim_ if _z_dim_ is not None else 0\n    reverse_y_ = reverse_y_ if reverse_y_ is not None else False\n\n    # set up empty lists of objects to be filled\n    mesh = []\n    title = []\n    all_legends = []\n    all_borders = []\n    all_labels = []\n\n    for i, data_coll in enumerate(_data):\n        try:  # sense when several legend parameters are connected\n            lpar = legend_par_[i]\n        except IndexError:\n            lpar = None if len(legend_par_) == 0 else legend_par_[-1]\n\n        # create the hourly plot object and get the main pieces of geometry\n        hour_plot = HourlyPlot(data_coll, lpar, _base_pt_,\n                               _x_dim_, _y_dim_, _z_dim_, reverse_y_)\n        msh = from_mesh2d(hour_plot.colored_mesh2d, _base_pt_.z) if _z_dim_ == 0 else \\\n            from_mesh3d(hour_plot.colored_mesh3d)\n        mesh.append(msh)\n        border = [from_polyline2d(hour_plot.chart_border2d, _base_pt_.z)] + \\\n            [from_linesegment2d(line, _base_pt_.z) for line in hour_plot.hour_lines2d] + \\\n            [from_linesegment2d(line, _base_pt_.z) for line in hour_plot.month_lines2d]\n        all_borders.append(border)\n        legnd = legend_objects(hour_plot.legend)\n        all_legends.append(legnd)\n        tit_txt = text_objects(hour_plot.title_text, hour_plot.lower_title_location,\n                               hour_plot.legend_parameters.text_height,\n                               hour_plot.legend_parameters.font)\n        title.append(tit_txt)\n\n        # create the text label objects\n        label1 = [text_objects(txt, Plane(o=Point3D(pt.x, pt.y, _base_pt_.z)),\n                               hour_plot.legend_parameters.text_height,\n                               hour_plot.legend_parameters.font, 2, 3)\n                  for txt, pt in zip(hour_plot.hour_labels, hour_plot.hour_label_points2d)]\n        label2 = [text_objects(txt, Plane(o=Point3D(pt.x, pt.y, _base_pt_.z)),\n                               hour_plot.legend_parameters.text_height,\n                               hour_plot.legend_parameters.font, 1, 0)\n                  for txt, pt in zip(hour_plot.month_labels, hour_plot.month_label_points2d)]\n        all_labels.append(label1 + label2)\n        \n        # increment the base point so that the next chart doesn't overlap this one\n        try:\n            next_tstep = _data[i + 1].header.analysis_period.timestep\n        except IndexError:\n            next_tstep = 1\n        increment = 24 * next_tstep * _y_dim_ * 1.5\n        _base_pt_ = Point3D(_base_pt_.x, _base_pt_.y - increment, _base_pt_.z)\n\n    # convert nexted lists into data trees\n    legend = list_to_data_tree(all_legends)\n    borders = list_to_data_tree(all_borders)\n    labels = list_to_data_tree(all_labels)\n", 
  "category": "Ladybug", 
  "name": "LB Hourly Plot", 
  "description": "Create a colored plot of any hourly data collection.\n-"
}
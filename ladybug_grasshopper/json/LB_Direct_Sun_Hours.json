{
  "version": "0.1.1", 
  "nickname": "DirectSunHours", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "points", 
        "description": "The grid of points on the test _geometry that are be used to perform\nthe direct sun analysis.  Note that these points are generated even\nwhen _run is set to \"False\" so that an estimate of study run time can\nbe obtained.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "results", 
        "description": "A list of numbers that aligns with the points. Each number indicates\nthe number of hours of direct sunlight received by each of the\npoints.  Note that is is the number of hours out of the total\nnumber of connected _vectors.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh", 
        "description": "A colored mesh of the test _geometry representing the hours of direct\nsunlight received by this input _geometry", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "A legend showing the number of hours that correspond to the colors\nof the mesh.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the study title.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "int_mtx", 
        "description": "A Matrix object that can be connected to the \"LB Deconstruct Matrix\"\ncomponent to obtain detailed vector-by-vector results of the study.\nEach sub-list of the matrix (aka. branch of the Data Tree) represents\none of the points used for analysis. The length of each sub-list\nmatches the number of _vectors used for the analysis. Each value\nin the sub-list is either a \"1\", indicating that the sun is visible\nfor that vector, or a \"0\", indicating that the sun is not visible\nfor that vector.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_vectors", 
      "description": "Sun vectors from the \"LB SunPath\" component, which will be used\nto determine the number of hours of direct sunlight received by the\ntest _geometry.", 
      "type": "Vector3d", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_timestep_", 
      "description": "A positive integer for the number of timesteps per hour at\nwhich the \"LB SunPath\" component generated sun vectors. This is used\nto correctly interpret the time duration represented by each of\nthe input sun vectors. (Default: 1 for 1 vector per hour).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_geometry", 
      "description": "Rhino Breps and/or Rhino Meshes for which direct sun analysis\nwill be conducted. If Breps are input, they will be subdivided using\nthe _grid_size to yeild individual points at which analysis will\noccur. If a Mesh is input, direct sun analysis analysis will be\nperformed for each face of this mesh instead of subdividing it.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "context_", 
      "description": "Rhino Breps and/or Rhino Meshes representing context geometry\nthat can block sunlight to the test _geometry.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_grid_size", 
      "description": "A positive number in Rhino model units for the size of grid\ncells at which the input _geometry will be subdivided for direct sun\nanalysis. The smaller the grid size, the higher the resolution of\nthe analysis and the longer the calculation will take.  So it is\nrecommended that one start with a large value here and decrease\nthe value as needed. However, the grid size should usually be\nsmaller than the dimensions of the smallest piece of the _geometry\nand context_ in order to yield meaningful results.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_offset_dist_", 
      "description": "A number for the distance to move points from the surfaces\nof the input _geometry.  Typically, this should be a small positive\nnumber to ensure points are not blocked by the mesh. (Default: 10 cm\nin the equivalent Rhino Model units).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "Optional legend parameters from the \"LB Legend Parameters\"\nthat will be used to customize the display of the results.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "parallel_", 
      "description": "Set to \"True\" to run the study using multiple CPUs. This can\ndramatically decrease calculation time but can interfere with\nother computational processes that might be running on your\nmachine. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the component and perform direct sun analysis.\nIf set to \"False\" but all other required inputs are specified, this\ncomponent will output points showing the resolution of the analysis\n(but not run the study) so that an estimate of study run time can\nbe obtained.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Analyze Geometry", 
  "code": "\ntry:\n    from ladybug.color import Colorset\n    from ladybug.graphic import GraphicContainer\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.togeometry import to_joined_gridded_mesh3d, to_vector3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_point3d, from_vector3d\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.intersect import join_geometry_to_mesh, intersect_mesh_rays\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, hide_output, \\\n        show_output, objectify_output\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # set the default offset distance\n    _offset_dist_ = _offset_dist_ if _offset_dist_ is not None \\\n        else 0.1 / conversion_to_meters()\n\n    # create the gridded mesh from the geometry\n    study_mesh = to_joined_gridded_mesh3d(_geometry, _grid_size, _offset_dist_)\n    points = [from_point3d(pt) for pt in study_mesh.face_centroids]\n\n    if _run:  # run the entire study\n        # hide the study points and mesh the geometry and context\n        hide_output(ghenv.Component, 1)\n        shade_mesh = join_geometry_to_mesh(_geometry + context_)\n\n        # get the study points and reverse the sun vectors (for backward ray-tracting)\n        rev_vec = [from_vector3d(to_vector3d(vec).reverse()) for vec in _vectors]\n        normals = [from_vector3d(vec) for vec in study_mesh.face_normals]\n\n        # intersect the rays with the mesh\n        int_matrix, angles = intersect_mesh_rays(\n            shade_mesh, points, rev_vec, normals, parallel=parallel_)\n\n        # compute the results\n        int_mtx = objectify_output('Sun Intersection Matrix', int_matrix)\n        if _timestep_ and _timestep_ != 1:  # divide by the timestep before output\n            results = [sum(int_list) / _timestep_ for int_list in int_matrix]\n        else:  # no division required\n            results = [sum(int_list) for int_list in int_matrix]\n\n        # create the mesh and legend outputs\n        graphic = GraphicContainer(results, study_mesh.min, study_mesh.max, legend_par_)\n        graphic.legend_parameters.title = 'hours'\n        if legend_par_ is None or legend_par_.are_colors_default:\n            graphic.legend_parameters.colors = Colorset.ecotect()\n        title = text_objects('Direct Sun Hours', graphic.lower_title_location,\n                             graphic.legend_parameters.text_height * 1.5,\n                             graphic.legend_parameters.font)\n\n        # create all of the visual outputs\n        study_mesh.colors = graphic.value_colors\n        mesh = from_mesh3d(study_mesh)\n        legend = legend_objects(graphic.legend)\n\n    else:  # only show the the test points\n        show_output(ghenv.Component, 1)\n", 
  "category": "Ladybug", 
  "name": "LB Direct Sun Hours", 
  "description": "Calculate the number of hours of direct sunlight received by geometry using sun\nvectors obtained from the \"LB SunPath\" component.\n_\nSuch direct sun calculations can be used for shadow studies of outdoor enviroments\nor can be used to estimate glare potential from direct sun on the indoors.\n_\nNote that this component uses the CAD environment's ray intersection methods,\nwhich can be fast for geometries with low complexity but does not scale well\nfor complex geometries or many test points. For such complex studies,\nhoneybee-radiance should be used.\n-"
}
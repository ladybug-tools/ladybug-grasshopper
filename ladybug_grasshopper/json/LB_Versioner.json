{
  "version": "0.4.1", 
  "nickname": "Versioner", 
  "outputs": [
    []
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_update", 
      "description": "Set to True to update your installation of Ladybug Tools to the\nlatest development version or to be at the version specified below.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "version_", 
      "description": "An optional text string for the version of the grasshopper\nplugin which you would like to update to. The input should contain\nonly integers separated by two periods (eg. 1.0.0). The version does\nnot need to be newer than the current installation and can be older\nbut grasshopper plugin versions less than 0.3.0 are not supported.\nA list of all versions of the Grasshopper plugin can be found\nhere - https://github.com/ladybug-tools/lbt-grasshopper/releases", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "clean_standards_", 
      "description": "Set to True to have the library of standards (constructions,\nschedules, modifiers) overwritten with a completely fresh copy.\nDO NOT SET TO TRUE IF YOU WANT TO KEEP ANY OBJECTS THAT YOU HAVE\nADDED TO YOUR honeybee_standards FOLDER. If False or None, any\nexisting standards will be left alone.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "5 :: Version", 
  "code": "\ntry:\n    from ladybug.futil import preparedir, nukedir, copy_file_tree, unzip_file\n    from ladybug.config import folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.pythonpath import iron_python_search_path, create_python_package_dir\n    from ladybug_{{cad}}.download import download_file_by_name\n    from ladybug_{{cad}}.versioning.userobject import UO_FOLDER, {{PLGN}}A_FOLDER\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\nimport os\nimport subprocess\n\n\ndef get_python_exe():\n    \"\"\"Get the path to the Python installed in the ladybug_tools folder.\n\n    Will be None if Python is not installed.\n    \"\"\"\n    py_update = os.path.join(folders.ladybug_tools_folder, 'python')\n    py_exe_file = os.path.join(py_update, 'python.exe') if os.name == 'nt' else \\\n        os.path.join(py_update, 'bin', 'python3')\n    py_site_pack = os.path.join(py_update, 'Lib', 'site-packages') if os.name == 'nt' else \\\n        os.path.join(py_update, 'lib', 'python3.8', 'site-packages')\n    if os.path.isfile(py_exe_file):\n        return py_exe_file, py_site_pack\n    return None, None\n\n\ndef get_recipe_directory():\n    \"\"\"Get the directory where Honeybee recipes are installed.\"\"\"\n    re_folder = os.path.join(folders.ladybug_tools_folder, 'resources', 'recipes')\n    if not os.path.isdir(re_folder):\n        os.makedirs(re_folder)\n    return re_folder\n\n\ndef get_gem_directory():\n    \"\"\"Get the directory where measures distributed with Ladybug Tools are installed.\"\"\"\n    measure_folder = os.path.join(folders.ladybug_tools_folder, 'resources', 'measures')\n    if not os.path.isdir(measure_folder):\n        os.makedirs(measure_folder)\n    return measure_folder\n\n\ndef get_standards_directory():\n    \"\"\"Get the directory where Honeybee standards are installed.\"\"\"\n    hb_folder = os.path.join(folders.ladybug_tools_folder, 'resources', 'standards')\n    if not os.path.isdir(hb_folder):\n        os.makedirs(hb_folder)\n    return hb_folder\n\n\ndef remove_dist_info_files(directory):\n    \"\"\"Remove all of the PyPI .dist-info folders from a given directory.\n    \n    Args:\n        directory: A directory containing .dist-info folders to delete.\n    \"\"\"\n    for fold in os.listdir(directory):\n        if fold.endswith('.dist-info'):\n            nukedir(os.path.join(directory, fold), rmdir=True)\n\n\ndef update_libraries_pip(python_exe, package_name, version=None, target=None):\n    \"\"\"Change python libraries to be of a specific version using pip.\n\n    Args:\n        python_exe: The path to the Python executable to be used for installation.\n        package_name: The name of the PyPI package to install.\n        version: An optional string for the version of the package to install.\n            If None, the library will be updated to the latest version with -U.\n        target: An optional target directory into which the package will be installed.\n        \"\"\"\n    # build up the command using the inputs\n    if version is not None:\n        package_name = '{}=={}'.format(package_name, version)\n    cmds = [python_exe, '-m', 'pip', 'install', package_name]\n    if version is None:\n        cmds.append('-U')\n    if target is not None:\n        cmds.extend(['--target', target, '--upgrade'])\n\n    # execute the command and print any errors\n    print('Installing \"{}\" version via pip'.format(package_name))\n    use_shell = True if os.name == 'nt' else False\n    process = subprocess.Popen(\n        cmds, shell=use_shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    output = process.communicate()\n    stdout, stderr = output\n    return stderr\n\n\ndef download_repo_github(repo, target_directory, version=None):\n    \"\"\"Download a repo of a particular version from from github.\n\n    Args:\n        repo: The name of a repo to be downloaded (eg. 'lbt-{{plugin}}').\n        target_directory: the directory where the library should be downloaded to.\n        version: The version of the repository to download. If None, the most\n            recent version will be downloaded. (Default: None)\n        \"\"\"\n    # download files\n    if version is None:\n        url = \"https://github.com/ladybug-tools/{}/archive/master.zip\".format(repo)\n    else:\n        url = \"https://github.com/ladybug-tools/{}/archive/v{}.zip\".format(repo, version)\n    zip_file = os.path.join(target_directory, '%s.zip' % repo)\n    print 'Downloading \"{}\"  github repository to: {}'.format(repo, target_directory)\n    download_file_by_name(url, target_directory, zip_file)\n\n    #unzip the file\n    unzip_file(zip_file, target_directory)\n\n    # try to clean up the downloaded zip file\n    try:\n        os.remove(zip_file)\n    except:\n        print 'Failed to remove downloaded zip file: {}.'.format(zip_file)\n\n    # return the directory where the unzipped files live\n    if version is None:\n        return os.path.join(target_directory, '{}-master'.format(repo))\n    else:\n        return os.path.join(target_directory, '{}-{}'.format(repo, version))\n\n\ndef parse_lbt_gh_versions(lbt_gh_folder):\n    \"\"\"Parse versions of compatible libs from a clone of the lbt-{{plugin}} repo.\n\n    Args:\n        lbt_gh_folder: Path to the clone of the lbt-{{plugin}} repo\n \n    Returns:\n        A dictionary of library versions formatted like so (but with actual version\n        numbers in place of '0.0.0':\n\n        {\n            'lbt-dragonfly' = '0.0.0',\n            'ladybug-{{cad}}' = '0.0.0',\n            'lbt-{{plugin}}' = '0.0.0',\n            'honeybee-openstudio-gem' = '0.0.0',\n            'honeybee-standards' = '0.0.0',\n            'honeybee-energy-standards' = '0.0.0',\n            'ladybug-{{plugin}}': '0.0.0',\n            'honeybee-{{plugin}}-core': '0.0.0',\n            'honeybee-{{plugin}}-radiance': '0.0.0',\n            'honeybee-{{plugin}}-energy': '0.0.0',\n            'dragonfly-{{plugin}}': '0.0.0',\n            'ladybug-{{plugin}}-dotnet': '0.0.0'\n        }\n    \"\"\"\n    # set the names of the libraries to collect and the version dict\n    version_dict = {\n        'lbt-dragonfly': None,\n        'queenbee-luigi': None,\n        'ladybug-{{cad}}': None,\n        'honeybee-radiance-recipe': None,\n        'honeybee-standards': None,\n        'honeybee-energy-standards': None,\n        'honeybee-openstudio-gem': None,\n        'ladybug-{{plugin}}': None,\n        'honeybee-{{plugin}}-core': None,\n        'honeybee-{{plugin}}-radiance': None,\n        'honeybee-{{plugin}}-energy': None,\n        'dragonfly-{{plugin}}': None,\n        'ladybug-{{plugin}}-dotnet': None\n        }\n    libs_to_collect = list(version_dict.keys())\n\n    def search_versions(version_file):\n        \"\"\"Search for version numbers within a .txt file.\"\"\"\n        with open(version_file) as ver_file:\n            for row in ver_file:\n                try:\n                    library, version = row.strip().split('==')\n                    if library in libs_to_collect:\n                        version_dict[library] = version\n                except Exception :  # not a row with a ladybug tools library\n                    pass\n\n    # search files for versions\n    requirements = os.path.join(lbt_gh_folder, 'requirements.txt')\n    dev_requirements = os.path.join(lbt_gh_folder, 'dev-requirements.txt')\n    ruby_requirements = os.path.join(lbt_gh_folder, 'ruby-requirements.txt')\n    search_versions(requirements)\n    search_versions(dev_requirements)\n    search_versions(ruby_requirements)\n    return version_dict\n\n\nif all_required_inputs(ghenv.Component) and _update is True:\n    # ensure that Python has been installed in the ladybug_tools folder\n    py_exe, py_lib = get_python_exe()\n    assert py_exe is not None, \\\n        'No Python instalation was found at: {}.\\nThis is a requirement in ' \\\n        'order to contine with installation'.format(\n            os.path.join(folders.ladybug_tools_folder, 'python'))\n\n    # get the compatiable versions of all the dependencies\n    temp_folder = os.path.join(folders.ladybug_tools_folder, 'temp')\n    lbt_gh_folder = download_repo_github('lbt-{{plugin}}', temp_folder, version_)\n    ver_dict = parse_lbt_gh_versions(lbt_gh_folder)\n    ver_dict['lbt-{{plugin}}'] = version_\n\n    # install the core libraries\n    print 'Installing Ladybug Tools core Python libraries.'\n    df_ver = ver_dict['lbt-dragonfly']\n    stderr = update_libraries_pip(py_exe, 'lbt-dragonfly[cli]', df_ver)\n    if os.path.isdir(os.path.join(py_lib, 'lbt_dragonfly-{}.dist-info'.format(df_ver))):\n        print 'Ladybug Tools core Python libraries successfully installed!\\n '\n    else:\n        give_warning(ghenv.Component, stderr)\n        print stderr\n\n    # install the queenbee core libraries\n    print 'Installing Queenbee core Python libraries.'\n    qb_ver = ver_dict['queenbee-luigi']\n    stderr = update_libraries_pip(py_exe, 'queenbee-luigi[cli]', qb_ver)\n    if os.path.isdir(os.path.join(py_lib, 'queenbee_luigi-{}.dist-info'.format(qb_ver))):\n        print 'Queenbee core Python libraries successfully installed!\\n '\n    else:\n        give_warning(stderr)\n        print stderr\n\n    # install the library needed for interaction with {{Cad}}\n    print 'Installing ladybug-{{cad}} Python library.'\n    rh_ver = ver_dict['ladybug-{{cad}}']\n    stderr = update_libraries_pip(py_exe, 'ladybug-{{cad}}[cli]', rh_ver)\n    if os.path.isdir(os.path.join(py_lib, 'ladybug_{{cad}}-{}.dist-info'.format(rh_ver))):\n        print 'Ladybug-{{cad}} Python library successfully installed!\\n '\n    else:\n        give_warning(ghenv.Component, stderr)\n        print stderr\n    if os.name != 'nt':  # make sure libraries are copied to the {{cad}} scripts folder\n        iron_python_search_path(create_python_package_dir())\n\n    # install the {{plugin}} components\n    print 'Installing Ladybug Tools {{Plugin}} components.'\n    gh_ver = ver_dict['lbt-{{plugin}}']\n    stderr = update_libraries_pip(py_exe, 'lbt-{{plugin}}', gh_ver, UO_FOLDER)\n    lbgh_ver = ver_dict['ladybug-{{plugin}}']\n    if os.path.isdir(os.path.join(UO_FOLDER, 'ladybug_{{plugin}}-{}.dist-info'.format(lbgh_ver))):\n        print 'Ladybug Tools {{Plugin}} components successfully installed!\\n '\n        remove_dist_info_files(UO_FOLDER)  # remove the .dist-info files\n    else:\n        give_warning(ghenv.Component, stderr)\n        print stderr\n\n    # install the .gha {{Plugin}} components\n    gha_location = os.path.join({{PLGN}}A_FOLDER, 'ladybug_{{plugin}}_dotnet')\n    if os.path.isdir(gha_location):\n        msg = '.gha files already exist in your Components folder and cannot be ' \\\n            'deleted while {{Plugin}} is open.\\nClose {{Plugin}}, delete the ' \\\n            '.gha files at\\n{}\\nand rerun this versioner component.\\nOr simply keep '\\\n            'using the old .gha component if you do not need the latest ' \\\n            '.gha component features.\\n '.format(gha_location)\n        print msg\n    else:\n        gha_ver = ver_dict['ladybug-{{plugin}}-dotnet']\n        stderr = update_libraries_pip(py_exe, 'ladybug-{{plugin}}-dotnet', gha_ver, {{PLGN}}A_FOLDER)\n        package_dir = os.path.join(\n            {{PLGN}}A_FOLDER, 'ladybug_{{plugin}}_dotnet-{}.dist-info'.format(gha_ver))\n        if os.path.isdir(package_dir):\n            print 'Ladybug Tools .gha {{Plugin}} components successfully installed!\\n '\n            remove_dist_info_files({{PLGN}}A_FOLDER)  # remove the dist-info files\n        else:\n            give_warning(stderr)\n            print stderr\n\n    # install the honeybee_radiance_recipe package to recipe resources\n    print 'Installing Honeybee recipes.'\n    recipe_dir = get_recipe_directory()\n    rec_ver = ver_dict['honeybee-radiance-recipe']\n    if os.path.isdir(os.path.join(recipe_dir, 'honeybee_radiance_recipe')):\n        nukedir(os.path.join(recipe_dir, 'honeybee_radiance_recipe'), True)\n    stderr = update_libraries_pip(py_exe, 'honeybee-radiance-recipe', rec_ver, recipe_dir)\n    if os.path.isdir(os.path.join(recipe_dir, 'honeybee_radiance_recipe-{}.dist-info'.format(rec_ver))):\n        print 'Honeybee recipes successfully installed!\\n '\n        remove_dist_info_files(recipe_dir)  # remove the dist-info files\n    else:\n        give_warning(stderr)\n        print stderr\n\n    # install the honeybee-openstudio ruby gem\n    gem_ver = ver_dict['honeybee-openstudio-gem']\n    print 'Installing Honeybee-OpenStudio gem version {}.'.format(gem_ver)\n    gem_dir = get_gem_directory()\n    base_folder = download_repo_github('honeybee-openstudio-gem', gem_dir, gem_ver)\n    source_folder = os.path.join(base_folder, 'lib')\n    lib_folder = os.path.join(gem_dir, 'honeybee_openstudio_gem', 'lib')\n    print 'Copying \"honeybee_openstudio_gem\" source code to {}\\n '.format(lib_folder)\n    copy_file_tree(source_folder, lib_folder)\n    nukedir(base_folder, True)\n\n    # always update the honeybee-energy-standards package\n    print 'Installing Honeybee energy standards.'\n    stand_dir = get_standards_directory()\n    hes_ver = ver_dict['honeybee-energy-standards']\n    if os.path.isdir(os.path.join(stand_dir, 'honeybee_energy_standards')):\n        nukedir(os.path.join(stand_dir, 'honeybee_energy_standards'), True)\n    stderr = update_libraries_pip(py_exe, 'honeybee-energy-standards', hes_ver, stand_dir)\n    if os.path.isdir(os.path.join(stand_dir, 'honeybee_energy_standards-{}.dist-info'.format(hes_ver))):\n        print 'Honeybee energy standards successfully installed!\\n '\n        remove_dist_info_files(stand_dir)  # remove the dist-info files\n    else:\n        give_warning(stderr)\n        print stderr\n\n    # install the standards libraries if requested or they don't exist\n    if clean_standards_ or not os.path.isdir(os.path.join(stand_dir, 'honeybee_standards')):\n        print 'Installing Ladybug Tools standards libraries (constructions, schedules, etc.).'\n        hs_ver = ver_dict['honeybee-standards']\n        if os.path.isdir(os.path.join(stand_dir, 'honeybee_standards')):\n            nukedir(os.path.join(stand_dir, 'honeybee_standards'), True)\n        stderr = update_libraries_pip(py_exe, 'honeybee-standards', hs_ver, stand_dir)\n        if os.path.isdir(os.path.join(stand_dir, 'honeybee_standards-{}.dist-info'.format(hs_ver))):\n            print 'Honeybee standards successfully installed!\\n '\n            remove_dist_info_files(stand_dir)  # remove the dist-info files\n        else:\n            give_warning(stderr)\n            print stderr\n\n    # delete the temp folder and give a completion message\n    nukedir(temp_folder, True)\n    print 'Update successful!'\n    print 'Restart {{Plugin}} and {{Cad}} to load the new components + library.'\nelse:  # give a message to the user about what to do\n    print 'Make sure you are connected to the internet and set _update to True!'", 
  "category": "Ladybug", 
  "name": "LB Versioner", 
  "description": "This component updates the Ladybug Tools core libraries and grasshopper components\nto either the latest development version available (default) or to a specific\nversion of the grasshopper plugin.\n_\nThe input version_ does not need to be newer than the current installation and can\nbe older but grasshopper plugin versions less than 0.3.0 are not supported.\nA list of all versions of the Grasshopper plugin and corresponding release notes\ncan be found at: https://github.com/ladybug-tools/lbt-grasshopper/releases\n_\nThis component can also overwrite the user libraries of standards (constructions,\nschedules, modifiers) with a completely fresh copy if clean_standards_ is set to True.\n-"
}
{
  "version": "0.2.0", 
  "nickname": "SyncGHFile", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "report", 
        "description": "Errors, warnings, etc.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_sync", 
      "description": "Set to \"True\" to have this component to search through the\ncurrent Grasshopper file and sync all Ladybug Tools components\nwith the version in the Grasshopper toolbar.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "5 :: Version", 
  "code": "\ntry:\n    from ladybug_{{cad}}.versioning.gather import gather_canvas_components\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\nimport {{Plugin}}.Kernel as gh\nfrom {{Plugin}}.Folders import UserObjectFolders\nimport System.Drawing as sd\nimport os\n\n\ndef has_version_changed(uo, component):\n    \"\"\"Check if the version of a user object has changed.\"\"\"\n    return not uo.Message == component.Message\n\n\ndef compare_port(p1, p2):\n    \"\"\"Compare two component port objects and return True if they are equal.\n\n    Args:\n        p1: The first port object.\n        p2: The second port object.\n    \"\"\"\n    if hasattr(p1, 'TypeHint'):\n        if p1.Name != p2.Name:\n            return False\n        elif p1.TypeHint.TypeName != p2.TypeHint.TypeName:\n            return False\n        elif str(p1.Access) != str(p2.Access):\n            return False\n        else:\n            return True\n    else:\n        # output\n        if p1.Name != p2.Name:\n            return False\n        else:\n            return True        \n\n\ndef compare_ports(c1, c2):\n    \"\"\"Compare all of the ports of two components and return True if they are equal.\n\n    Args:\n        c1: The first component object.\n        c2: The second component object.\n    \"\"\"\n    for i in xrange(c1.Params.Input.Count):\n        if not compare_port(c1.Params.Input[i], c2.Params.Input[i]):\n            return True\n\n    for i in xrange(c1.Params.Output.Count):\n        if not compare_port(c1.Params.Output[i], c2.Params.Output[i]):\n            return True\n\n    return False\n\n\ndef input_output_changed(uo, component):\n    \"\"\"Check if inputs or outputs have changed between two components.\"\"\"\n    if uo.Params.Input.Count != component.Params.Input.Count:\n        return True\n    elif uo.Params.Output.Count != component.Params.Output.Count:\n        return True\n\n    return compare_ports(uo, component)\n\n\ndef insert_new_uo(uo, component, doc):\n    \"\"\"Insert a new user object next to an existing one in the {{Plugin}} doc.\n\n    Args:\n        uo: The user object component instance\n        component: The outdated component where the userobject will be inserted\n            next to.\n        cod: The {{Plugin}} document object.\n    \"\"\"\n    # use component to find the location\n    x = component.Attributes.Pivot.X + 30\n    y = component.Attributes.Pivot.Y - 20\n\n    # insert the new one\n    uo.Attributes.Pivot = sd.PointF(x, y)\n    doc.AddObject(uo , False, 0)\n\n\ndef mark_component(doc, comp, note=None):\n    \"\"\"Put a circular red group areound a component and label it with a note.\"\"\"\n    note = note or 'There is a change in the input or output! ' \\\n        'Replace this component manually.'\n    grp = gh.Special.{{PLGN}}_Group()\n    grp.CreateAttributes()\n    grp.Border = gh.Special.{{PLGN}}_GroupBorder.Blob\n    grp.AddObject(comp.InstanceGuid)\n    grp.Colour = sd.Color.IndianRed\n    grp.NickName = note\n    doc.AddObject(grp, False);    \n    return True\n\n\ndef update_component(component, uofolder):\n    \"\"\"Update a component using its version in the user object folder.\"\"\"\n\n    # identify the correct user object sub-folder to which the component belongs\n    if str(component.Name).startswith('LB'):  # ladybug [+]\n        fp = os.path.join(uofolder, 'ladybug_{{plugin}}', 'user_objects',\n                          '%s.ghuser' % component.Name)\n    elif str(component.Name).startswith('HB'):  # honeybee[+]\n        if str(component.Category) == 'Honeybee':\n            fp = os.path.join(uofolder, 'honeybee_{{plugin}}_core', 'user_objects',\n                              '%s.ghuser' % component.Name)\n        elif str(component.Category) == 'HB-Energy':\n            fp = os.path.join(uofolder, 'honeybee_{{plugin}}_energy', 'user_objects',\n                              '%s.ghuser' % component.Name)\n        elif str(component.Category) == 'HB-Radiance':\n            fp = os.path.join(uofolder, 'honeybee_{{plugin}}_radiance', 'user_objects',\n                              '%s.ghuser' % component.Name)\n    elif str(component.Name).startswith('DF'):  # dragonfly [+]\n        fp = os.path.join(uofolder, 'dragonfly_{{plugin}}', 'user_objects',\n                          '%s.ghuser' % component.Name)\n    elif str(component.Name).startswith('Ladybug'):  # ladybug legacy\n        fp = os.path.join(uofolder, 'Ladybug', '%s.ghuser' % component.Name)\n    elif str(component.Name).startswith('Honeybee'):  # honeybee legacy\n        fp = os.path.join(uofolder, 'Honeybee', '%s.ghuser' % component.Name)\n    elif str(component.Name).startswith('HoneybeePlus'):  # old honeybee [+]\n        fp = os.path.join(uofolder, 'HoneybeePlus', '%s.ghuser' % component.Name)\n    else:  # unidentified plugin; see if we can find it in the root\n        fp = os.path.join(uofolder, '%s.ghuser' % component.Name)\n        if not os.path.isfile(fp):\n            category = str(component.Name).split('_')[0]\n            fp = os.path.join(uofolder, category, '%s.ghuser' % component.Name)\n\n    if not os.path.isfile(fp):\n        warning = 'Failed to find the userobject for %s' % component.Name\n        give_warning(ghenv.Component, warning)\n        return False\n\n    # the the instance of the user object\n    uo = gh.{{PLGN}}_UserObject(fp).InstantiateObject()\n\n    # check to see if the version of the userobject has changed\n    if not has_version_changed(uo, component):\n        return False \n\n    # the version has changed\n    component.Code = uo.Code\n\n    # define the callback function\n    def call_back(document):\n        component.ExpireSolution(False)\n\n    # update the solution\n    doc.ScheduleSolution(2,\n        gh.{{PLGN}}_Document.{{PLGN}}_ScheduleDelegate(call_back))\n\n    # check if the inputs or outputs have changed\n    if input_output_changed(uo, component):\n        insert_new_uo(uo, component, doc)\n        mark_component(doc, component)  # mark component with a warning to the user\n        return 'Cannot update %s. Replace manually.' % component.Name\n\n    return 'Updated %s' % component.Name\n\n\nif all_required_inputs(ghenv.Component) and _sync:\n    # find the {{Plugin}} UserObjects folder and get the current canvass\n    uofolder = UserObjectFolders[0]\n    doc = ghenv.Component.OnPingDocument()\n\n    # load all of the {{PLGN}}Python userobjects and update the versions\n    components = gather_canvas_components(ghenv.Component)\n    report_init = (update_component(comp, uofolder) for comp in components)\n    report = '\\n'.join(r for r in report_init if r)\n", 
  "category": "Ladybug", 
  "name": "LB Sync Grasshopper File", 
  "description": "Sync the Ladybug Tools components in a Grasshopper file with the version of the\ncomponents that currently exist in the Grasshopper toolbar.\n-\nThis is useful for updating old Grasshopper definitions to newer plugin versions.\nHowever, this component will sync components regardless of version number or\ndate, even if the components in the toolbar are of an older version than those\ncurrently on the Grasshopper canvass.\n-\nAny components that cannot be updated automatically (because their inputs or\noutputs have changed) will be circled in red and should be replaced manually.\n-"
}
{
  "version": "1.7.1", 
  "nickname": "ViewFactors", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "view_vecs", 
        "description": "A list of vectors which are projected from each of the points to evaluate view.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "patch_mesh", 
        "description": "A mesh that represents the sphere of view patches around the _study_point\nat the input _resolution_. There is one face per patch and this can be\nused along with the int_mtx to create a colored visualization of patches\ncorresponding to different geometries around the point. Specifically,\nthe \"LB Spaital Heatmap\" component is recommended for such visualizations.\nNote that only one sphere is ever output from here and, in the event\nthat several _study_points are connected, this sphere will be located\nat the first point. Therefore, to create visualizations for the other\npoints, this mesh should be moved using the difference between the\nfirst study point and following study points.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "view_factors", 
        "description": "A list of view factors that describe the fraction of sperical\nview taken up by the input surfaces.  These values range from 0 (no view)\nto 1 (full view).  If multiple _study_points have been connected,\nthis output will be a data tree with one list for each point.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "int_mtx", 
        "description": "A Matrix object that can be connected to the \"LB Deconstruct Matrix\"\ncomponent to obtain detailed vector-by-vector results of the study.\nEach sub-list (aka. branch of the Data Tree) represents one of the\npoints used for analysis. Each value in this sub-list corresponds\nto a vector used in the study and the value denotes the index of the\ngeometry that each view vector hit. This can be used to identify\nwhich view pathces are intersected by each geometry. If no geometry\nis intersected by a given vector, the value will be -1.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_study_point", 
      "description": "A point or plane from which view vectors will be projected.\nNote that, if a point is connected, all view vectors will be\nweighted evenly (assuming no directional bias). However, if\na plane is connected, vectors will be weighted based on their\nangle to the plane normal, producing view factors for a surface\nin the connected plane. The first is useful for MRT calculations\nwhile the latter is needed for radiant assymetry calculations.\nThis input can also be a list of several points or planes.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_view_geo", 
      "description": "A list of breps, surfaces, or meshes to which you want to compute\nview factors. Note that by meshing and joining several goemtries\ntogether, the combined view factor to these geometries can\nbe computed.", 
      "type": "Mesh", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "context_", 
      "description": "Optional context geometry as breps, surfaces, or meshes that can\nblock the view to the _view_geo.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_resolution_", 
      "description": "A positive integer for the number of times that the original\nview vectors are subdivided. 1 indicates that 145 evenly-spaced\nvectors are used to describe a hemisphere, 2 indicates that\n577 vectors describe a hemisphere, and each successive value will\nroughly quadruple the number of view vectors used. Setting this to\na high value will result in a more accurate analysis but will take\nlonger to run. (Default: 1).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_cpu_count_", 
      "description": "An integer to set the number of CPUs used in the execution of the\nintersection calculation. If unspecified, it will automatically default\nto one less than the number of CPUs currently available on the\nmachine or 1 if only one processor is available.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to True to run the component and claculate view factors.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Analyze Geometry", 
  "code": "\ntry:\n    from ladybug.viewsphere import view_sphere\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.togeometry import to_plane, to_vector3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_point3d, from_vector3d\n    from ladybug_{{cad}}.intersect import join_geometry_to_mesh, intersect_view_factor\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, hide_output, \\\n        show_output, objectify_output, list_to_data_tree, recommended_processor_count\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # set up the defaults\n    _resolution_ = _resolution_ if _resolution_ is not None else 1\n    workers = _cpu_count_ if _cpu_count_ is not None else recommended_processor_count()\n\n    # process the input points and determine whether they are points or planes\n    points, normals = [], []\n    for geo in _study_point:\n        try:\n            test_plane = to_plane(geo)\n            points.append(from_point3d(test_plane.o))\n            normals.append(from_vector3d(test_plane.n))\n        except AttributeError:  # it is a point\n            points.append(geo)\n            normals.append(None)\n    if all(n is None for n in normals):\n        normals = None  # none of the inputs were planes\n\n    # generate the view vectors based on the resolution\n    patch_mesh, lb_vecs = view_sphere.sphere_patches(_resolution_)\n    patch_wghts = view_sphere.sphere_patch_weights(_resolution_)\n    # correct for the fact that the last patch has several mesh faces\n    patch_count = 144 * (_resolution_ ** 2) + 1\n    extend_count = ((6 * _resolution_) - 1)\n    up_dome, down_dome = list(lb_vecs[:patch_count]), list(lb_vecs[patch_count:])\n    up_dome.extend([up_dome[-1]] * extend_count)\n    down_dome.extend([down_dome[-1]] * extend_count)\n    lb_vecs = up_dome + down_dome\n    up_weights, down_weights = list(patch_wghts[:patch_count]), list(patch_wghts[patch_count:])\n    up_weights.extend([up_weights[-1] / extend_count] * extend_count)\n    down_weights.extend([down_weights[-1] / extend_count] * extend_count)\n    patch_wghts = up_weights + down_weights\n\n    # process the context if it is input\n    context_mesh = join_geometry_to_mesh(context_) if len(context_) != 0 else None\n\n    # perform the intersection to compute view factors\n    view_vecs = [from_vector3d(pt) for pt in lb_vecs]\n    view_factors, mesh_indices = intersect_view_factor(\n        _view_geo, points, view_vecs, patch_wghts,\n        context_mesh, normals, cpu_count=workers)\n\n    # convert the outputs into the correct {{Plugin}} format\n    view_factors = list_to_data_tree(view_factors)\n    int_mtx = objectify_output('View Factor Intersection Matrix', mesh_indices)\n    patch_mesh = from_mesh3d(patch_mesh.move(to_vector3d(points[0])))\n    hide_output(ghenv.Component, 2)\n", 
  "category": "Ladybug", 
  "name": "LB View Factors", 
  "description": "Calculate view factors from a point or plane to a set of geometries.\n_\nView factors are used in many thermal comfort calculations such as mean radiant\ntemperture (MRT) or discomfort from radiant assymetry. \n-"
}
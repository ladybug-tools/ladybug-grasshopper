{
  "version": "0.1.1", 
  "nickname": "VisibilityPercent", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "points", 
        "description": "The grid of points on the test _geometry that are be used to perform\nthe visibility analysis.  Note that these points are generated even\nwhen _run is set to \"False\" so that an estimate of study run time can\nbe obtained.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "results", 
        "description": "A list of numbers that aligns with the points. Each number indicates\nthe percentage of the _view_points that are not blocked by context geometry.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh", 
        "description": "A colored mesh of the test _geometry representing the percentage of\nthe input _geometry's visibility that is not blocked by context.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "A legend showing the number of hours that correspond to the colors\nof the mesh.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the study title.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "int_mtx", 
        "description": "A Matrix object that can be connected to the \"LB Deconstruct Matrix\"\ncomponent to obtain detailed point-by-point results of the study.\nEach sub-list (aka. branch of the Data Tree) represents one of the\ngeometry points used for analysis. The length of each sub-list matches\nthe number of _view_points used for the analysis. Each value in the\nsub-list is either a \"1\", indicating that the vector is visible\nfor that vector, or a \"0\", indicating that the vector is not visible\nfor that vector.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_view_points", 
      "description": "A list of points that characterize an area of interest to which\nvisibility is being evaluated. If the area of interest is more like\na surface than an individual point, the \"LB Generate Point Grid\"\ncomponent can be used to obtain a list of points that are evenly\ndistributed over the surface.", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "pt_weights_", 
      "description": "An optional list of numbers that align with the _view_points\nand represent weights of importance for each point.  Weighted\nvalues should be between 0 and 1 and should be closer to 1 if a\ncertain point is more important. The default value for all points\nis 0, which means they all have an equal importance.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_geometry", 
      "description": "Rhino Breps and/or Rhino Meshes for which visibility analysis\nwill be conducted. If Breps are input, they will be subdivided using\nthe _grid_size to yeild individual points at which analysis will\noccur. If a Mesh is input, visibility analysis analysis will be\nperformed for each face of this mesh instead of subdividing it.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "context_", 
      "description": "Rhino Breps and/or Rhino Meshes representing context geometry\nthat can block visibility from the test _geometry.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_grid_size", 
      "description": "A positive number in Rhino model units for the size of grid\ncells at which the input _geometry will be subdivided for direct sun\nanalysis. The smaller the grid size, the higher the resolution of\nthe analysis and the longer the calculation will take.  So it is\nrecommended that one start with a large value here and decrease\nthe value as needed. However, the grid size should usually be\nsmaller than the dimensions of the smallest piece of the _geometry\nand context_ in order to yield meaningful results.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_offset_dist_", 
      "description": "A number for the distance to move points from the surfaces\nof the input _geometry.  Typically, this should be a small positive\nnumber to ensure points are not blocked by the mesh. (Default: 10 cm\nin the equivalent Rhino Model units).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_geo_block_", 
      "description": "Set to \"True\" to count the input _geometry as opaque and\nset to \"False\" to discount the _geometry from the calculation and\nonly look at context_ that blocks the visibility. (Default: True)", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "Optional legend parameters from the \"LB Legend Parameters\"\nthat will be used to customize the display of the results.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "parallel_", 
      "description": "Set to \"True\" to run the study using multiple CPUs. This can\ndramatically decrease calculation time but can interfere with\nother computational processes that might be running on your\nmachine. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the component and perform visibility analysis of\nthe input _geometry.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Analyze Geometry", 
  "code": "\ntry:\n    from ladybug.color import Colorset\n    from ladybug.graphic import GraphicContainer\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.togeometry import to_joined_gridded_mesh3d, to_vector3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_point3d, from_vector3d\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.intersect import join_geometry_to_mesh, intersect_mesh_lines\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, hide_output, \\\n        show_output, objectify_output\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # set the default values\n    _offset_dist_ = _offset_dist_ if _offset_dist_ is not None \\\n        else 0.1 / conversion_to_meters()\n    if pt_weights_:\n        assert len(pt_weights_) == len(_view_points), \\\n            'The number of pt_weights_({}) must match the number of _view_points ' \\\n            '({}).'.format(len(pt_weights_), len(_view_points))\n\n    # create the gridded mesh from the geometry\n    study_mesh = to_joined_gridded_mesh3d(_geometry, _grid_size, _offset_dist_)\n    points = [from_point3d(pt) for pt in study_mesh.face_centroids]\n\n    if _run:  # run the entire study\n        # hide the study points and mesh the geometry and context\n        hide_output(ghenv.Component, 1)\n        shade_mesh = join_geometry_to_mesh(_geometry + context_) if _geo_block_ \\\n            or _geo_block_ is None else join_geometry_to_mesh(context_)\n\n        # intersect the lines with the mesh\n        int_matrix = intersect_mesh_lines(\n            shade_mesh, points, _view_points, parallel=parallel_)\n\n        # compute the results\n        int_mtx = objectify_output('Visibility Intersection Matrix', int_matrix)\n        vec_count = len(_view_points)\n        if pt_weights_:  # weight intersections by the input point weights\n            tot_wght = sum(pt_weights_) / vec_count\n            adj_weights = [wght / tot_wght for wght in pt_weights_]\n            results = []\n            for int_vals in int_matrix:\n                w_res = [ival * wght for ival, wght in zip(int_vals, adj_weights)]\n                results.append(sum(w_res) * 100 / vec_count)\n        else:  # no need to wieght results\n            results = [sum(int_list) * 100 / vec_count for int_list in int_matrix]\n\n        # create the mesh and legend outputs\n        graphic = GraphicContainer(results, study_mesh.min, study_mesh.max, legend_par_)\n        graphic.legend_parameters.title = '%'\n        if legend_par_ is None or legend_par_.are_colors_default:\n            graphic.legend_parameters.colors = Colorset.view_study()\n        title = text_objects(\n            'Visibility Percent', graphic.lower_title_location,\n            graphic.legend_parameters.text_height * 1.5,\n            graphic.legend_parameters.font)\n\n        # create all of the visual outputs\n        study_mesh.colors = graphic.value_colors\n        mesh = from_mesh3d(study_mesh)\n        legend = legend_objects(graphic.legend)\n\n    else:  # only show the points and the view vectors\n        show_output(ghenv.Component, 1)\n", 
  "category": "Ladybug", 
  "name": "LB Visibility Percent", 
  "description": "Evaluate the percent visibility from geometry to a specific set of points.\n_\nSuch visibility calculations can be used to understand the portions of a building\nfacade that can see a skyline or landmark when used on the outdoors. When used\non the indoors, they can evaluate the spectator view of a stage, screen, or other\npoint of interest.\n-"
}
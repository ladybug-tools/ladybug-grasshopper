{
  "version": "1.2.0", 
  "nickname": "SolarEnvelope", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "readMe!", 
        "description": "...", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "points", 
        "description": "The grid of points above the test _geometry representing the height to\nwhich the solar envelope boundary reaches.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh", 
        "description": "A mesh representing the solar envelope. For solar collections (the default),\nthis represents the boundary above which the one will have direct\nsolar access to all of the input _vectors. For solar rights envelopes,\nthis represents the boundary below which one can build without shading\nthe surrounding obstacles from any of the _vectors.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_geometry", 
      "description": "Rhino Breps and/or Rhino Meshes for which the solar envelope will\nbe computed. If Breps are input, they will be subdivided using\nthe _grid_size to yeild individual points at which analysis will\noccur. If a Mesh is input, the analysis will be performed for each\nvertex of the mesh instead of subdividing it.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_obstacles", 
      "description": "A list of horizontal planar Breps or curves indicating the tops (in the\ncase of solar collection) or bottoms (in the case of solar rights)\nof context geometries. Being above a solar collection boundary\nensures these top surfaces don't block the sun vectors to ones\nposition. Being below a solar rights boundary ensures these bottom\nsurfaces are protected from shade.", 
      "type": "Brep", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_vectors", 
      "description": "Sun vectors from the \"LB SunPath\" component, which determine the\ntimes of the year when sun should be accessible.", 
      "type": "Vector3d", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_grid_size", 
      "description": "A positive number in Rhino model units for the size of grid\ncells at which the input _geometry will be subdivided for envelope\nanalysis. The smaller the grid size, the higher the resolution of\nthe analysis and the longer the calculation will take.  So it is\nrecommended that one start with a large value here and decrease\nthe value as needed. The default will be a relativel coarse\nauto-calculated from the bounding box around the _geometry.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_height_limit_", 
      "description": "A positive number for the minimum distance below (for collections)\nor maximum distance above (for rights) the average _geometry height\nthat the envelope points can be. This is used when there are no\nvectors blocked for a given point. (Default: 100 meters).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "solar_rights_", 
      "description": "Set to True to compute a solar rights boundary and False to compute\na solar collection boundary. Solar rights boundaries represent the\nboundary below which one can build without shading the surrounding\nobstacles from any of the _vectors. Solar collection boundaries\nrepresent the boundary above which the one will have direct solar\naccess to all of the input _vectors. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the component and get a solar envelope.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Analyze Geometry", 
  "code": "\ntry:\n    from ladybug.solarenvelope import SolarEnvelope\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.togeometry import to_joined_gridded_mesh3d, to_face3d, \\\n        to_vector3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_point3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, hide_output\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # set the default offset distance\n    _height_limit_ = _height_limit_ if _height_limit_ is not None \\\n        else 100 / conversion_to_meters()\n\n    # convert geometry, objstacles, and vectors to ladybug_geomtery\n    study_mesh = to_joined_gridded_mesh3d(_geometry, _grid_size)\n    obstacle_faces = [g for geo in _obstacles for g in to_face3d(geo)]\n    sun_vectors = [to_vector3d(vec) for vec in _vectors]\n\n    # compute the solar envelope\n    solar_obj = SolarEnvelope(\n        study_mesh, obstacle_faces, sun_vectors, _height_limit_, solar_rights_)\n    lb_mesh = solar_obj.envelope_mesh()\n    mesh = from_mesh3d(lb_mesh)\n    points = [from_point3d(pt) for pt in lb_mesh.vertices]\n    hide_output(ghenv.Component, 1)\n", 
  "category": "Ladybug", 
  "name": "LB Solar Envelope", 
  "description": "Generate a solar envelope boundary for a given geometry, set of sun vectors, and\ncontext (obstacle) geometry.\n_\nSolar collection envelopes show the height above which one will have solar access\nto certain sun positions on a given site.\n_\nSolar rights envelopes illustrate the volume in which one can build while ensuring\nthat a new development does not shade the surrounding properties for certain sun\npositions.\n-"
}
{
  "version": "0.1.2", 
  "nickname": "ViewPercent", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "points", 
        "description": "The grid of points on the test _geometry that are be used to perform\nthe view analysis.  Note that these points are generated even\nwhen _run is set to \"False\" so that an estimate of study run time can\nbe obtained.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "view_vecs", 
        "description": "A list of vectors which are projected from each of the points\nto evaluate view. Note that these vectors are generated even\nwhen _run is set to \"False\" so that an understanding of the study's\nfield fo view and resolution can be obtained before running the study.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "results", 
        "description": "A list of numbers that aligns with the points. Each number indicates\nthe percentage of the view_vecs that are not blocked by context geometry.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh", 
        "description": "A colored mesh of the test _geometry representing the percentage of\nthe input _geometry's view that is not blocked by context.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "A legend showing the number of hours that correspond to the colors\nof the mesh.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the study title.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "int_mtx", 
        "description": "A Matrix object that can be connected to the \"LB Deconstruct Matrix\"\ncomponent to obtain detailed vector-by-vector results of the study.\nEach sub-list (aka. branch of the Data Tree) represents one of the\npoints used for analysis. The length of each sub-list matches the\nnumber of view_vecs used for the analysis. Each value in the sub-list\nis either a \"1\", indicating that the vector is visible for that\nvector, or a \"0\", indicating that the vector is not visible for\nthat vector.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_view_type", 
      "description": "Text or an integer representing the type of view analysis\nto conduct.  Choose from the following options.\n_\n0 - HorizontalRadial - The percentage of the 360 horizontal view\nplane that is not blocked by the context geometry.\n_\n1 - Horizonta30DegreeOffset - The percentage of the 360 horizontal\nview band bounded on top and bottom by a 30 degree offset from\nthe horizontal plane. 30 degress corresponds roughly to the\nvertical limit of human peripheral vision.\n_\n2 - Spherical - The percentage of the sphere surrounding each of\nthe test points that is not blocked by context geometry. This\nis equivalent to a solid angle and gives equal weight to all\nportions of the sphere.\n_\n3 - SkyExposure - The percentage of the sky that is visible from\neach of the the test points. This is distinct from SkyView,\nwhich is the amount of sky seen by a surface. SkyExposure is\nequivalent to a solid angle and gives equal weight to all\nportions of the sky.\n_\n4 - SkyView - The percentage of the sky that is visible from the\n_geometry surfaces. This is distinct from SkyExposure, which\ntreats each part of the sky with equal weight. SkyView weights\nthe portions of the sky according to thier projection into\nthe plane of the surface being evaluated. So SkyView for a\nhorizontal surface would give more importance to the sky\npatches that are overhead vs. those near the horizon.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_resolution_", 
      "description": "A positive integer for the number of times that the original\nview vectors are subdivided. 1 indicates that 145 evenly-spaced\nvectors are used to describe a hemisphere, 2 indicates that\n577 vectors describe a hemisphere, and each successive value will\nroughly quadruple the number of view vectors used. Setting this to\na high value will result in a more accurate analysis but will take\nlonger to run. (Default: 1).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_geometry", 
      "description": "Rhino Breps and/or Rhino Meshes for which view analysis\nwill be conducted. If Breps are input, they will be subdivided using\nthe _grid_size to yeild individual points at which analysis will\noccur. If a Mesh is input, view analysis analysis will be\nperformed for each face of this mesh instead of subdividing it.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "context_", 
      "description": "Rhino Breps and/or Rhino Meshes representing context geometry\nthat can block view from the test _geometry.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_grid_size", 
      "description": "A positive number in Rhino model units for the size of grid\ncells at which the input _geometry will be subdivided for direct sun\nanalysis. The smaller the grid size, the higher the resolution of\nthe analysis and the longer the calculation will take.  So it is\nrecommended that one start with a large value here and decrease\nthe value as needed. However, the grid size should usually be\nsmaller than the dimensions of the smallest piece of the _geometry\nand context_ in order to yield meaningful results.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_offset_dist_", 
      "description": "A number for the distance to move points from the surfaces\nof the input _geometry.  Typically, this should be a small positive\nnumber to ensure points are not blocked by the mesh. (Default: 10 cm\nin the equivalent Rhino Model units).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_geo_block_", 
      "description": "Set to \"True\" to count the input _geometry as opaque and\nset to \"False\" to discount the _geometry from the calculation and\nonly look at context_ that blocks the view.  The default depends on\nthe _view_type used.\n_\nIt is \"True\" for:\n* SkyExposure\n* SkyView\n_\nIt is \"False\" for:\n* HorizontalRadial\n* Horizonta30DegreeOffset\n* Spherical", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "Optional legend parameters from the \"LB Legend Parameters\"\nthat will be used to customize the display of the results.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "parallel_", 
      "description": "Set to \"True\" to run the study using multiple CPUs. This can\ndramatically decrease calculation time but can interfere with\nother computational processes that might be running on your\nmachine. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the component and perform view analysis of\nthe input _geometry.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Analyze Geometry", 
  "code": "\nimport math\ntry:  # python 2\n    from itertools import izip as zip\nexcept ImportError:  # python 3\n    pass\n\ntry:\n    from ladybug.viewsphere import view_sphere\n    from ladybug.color import Colorset\n    from ladybug.graphic import GraphicContainer\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.togeometry import to_joined_gridded_mesh3d, to_vector3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_point3d, from_vector3d\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.intersect import join_geometry_to_mesh, intersect_mesh_rays\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, hide_output, \\\n        show_output, objectify_output\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\n# dictionary to record all available view types\nVIEW_TYPES = {\n    'HorizontalRadial': 'Horizontal Radial',\n    'Horizonta30DegreeOffset': 'Horizontal 30-Degree Offset',\n    'Spherical': 'Spherical',\n    'SkyExposure': 'Sky Exposure',\n    'SkyView': 'Sky View',\n    '0': 'Horizontal Radial',\n    '1': 'Horizontal 30-Degree Offset',\n    '2': 'Spherical',\n    '3': 'Sky Exposure',\n    '4': 'Sky View'\n}\n\n\nif all_required_inputs(ghenv.Component):\n    # process the view_type_ and set the default values\n    vt_str = VIEW_TYPES[_view_type]\n    _resolution_ = _resolution_ if _resolution_ is not None else 1\n    _offset_dist_ = _offset_dist_ if _offset_dist_ is not None \\\n        else 0.1 / conversion_to_meters()\n    if _geo_block_ is None:\n        _geo_block_ = True if vt_str in ('Sky Exposure', 'Sky View') else False\n\n    # create the gridded mesh from the geometry\n    study_mesh = to_joined_gridded_mesh3d(_geometry, _grid_size, _offset_dist_)\n    points = [from_point3d(pt) for pt in study_mesh.face_centroids]\n\n    # get the view vectors based on the view type\n    patch_wghts = None\n    if vt_str == 'Horizontal Radial':\n        lb_vecs = view_sphere.horizontal_radial_vectors(30 * _resolution_)\n    elif vt_str == 'Horizontal 30-Degree Offset':\n        patch_mesh, lb_vecs = view_sphere.horizontal_radial_patches(30, _resolution_)\n        patch_wghts = view_sphere.horizontal_radial_patch_weights(30, _resolution_)\n    elif vt_str == 'Spherical':\n        patch_mesh, lb_vecs = view_sphere.sphere_patches(_resolution_)\n        patch_wghts = view_sphere.sphere_patch_weights(_resolution_)\n    else:\n        patch_mesh, lb_vecs = view_sphere.dome_patches(_resolution_)\n        patch_wghts = view_sphere.dome_patch_weights(_resolution_)\n    view_vecs = [from_vector3d(pt) for pt in lb_vecs]\n\n    if _run:  # run the entire study\n        # hide the study points and mesh the geometry and context\n        hide_output(ghenv.Component, 1)\n        shade_mesh = join_geometry_to_mesh(_geometry + context_) if _geo_block_ \\\n            else join_geometry_to_mesh(context_)\n\n        # intersect the rays with the mesh\n        if vt_str == 'Sky View':  # account for the normals of the surface\n            normals = [from_vector3d(vec) for vec in study_mesh.face_normals]\n            int_matrix, angles = intersect_mesh_rays(\n                shade_mesh, points, view_vecs, normals, parallel=parallel_)\n        else:\n            int_matrix, angles = intersect_mesh_rays(\n                shade_mesh, points, view_vecs, parallel=parallel_)\n\n        # compute the results\n        int_mtx = objectify_output('View Intersection Matrix', int_matrix)\n        vec_count = len(view_vecs)\n        results = []\n        if vt_str == 'Sky View':  # weight intersections by angle before output\n            for int_vals, angles in zip(int_matrix, angles):\n                w_res = (ival * 2 * math.cos(ang) for ival, ang in zip(int_vals, angles))\n                weight_result = sum(r * w for r, w in zip(w_res, patch_wghts))\n                results.append(weight_result * 100 / vec_count)\n        else:\n            if patch_wghts:\n                for int_list in int_matrix:\n                    weight_result = sum(r * w for r, w in zip(int_list, patch_wghts))\n                    results.append(weight_result * 100 / vec_count)\n            else:\n                results = [sum(int_list) * 100 / vec_count for int_list in int_matrix]\n\n        # create the mesh and legend outputs\n        graphic = GraphicContainer(results, study_mesh.min, study_mesh.max, legend_par_)\n        graphic.legend_parameters.title = '%'\n        if legend_par_ is None or legend_par_.are_colors_default:\n            graphic.legend_parameters.colors = Colorset.view_study()\n        title_txt = vt_str if vt_str in ('Sky Exposure', 'Sky View') else \\\n            '{} View'.format(vt_str)\n        title = text_objects(\n            title_txt, graphic.lower_title_location,\n            graphic.legend_parameters.text_height * 1.5,\n            graphic.legend_parameters.font)\n\n        # create all of the visual outputs\n        study_mesh.colors = graphic.value_colors\n        mesh = from_mesh3d(study_mesh)\n        legend = legend_objects(graphic.legend)\n\n    else:  # only show the points and the view vectors\n        show_output(ghenv.Component, 1)\n", 
  "category": "Ladybug", 
  "name": "LB View Percent", 
  "description": "Evaluate the percent view to the outdoors or sky from input geometry through context.\n_\nSuch view calculations can be used to estimate the quality of a view to the\noutdoors from a given location on the indoors. They can also be used on\nthe outdoors to evaluate the openness of street canyons to the sky, which has\nimplications for the pedestrian expereince as well as the rate of radiant heat\nloss from urban surfaces and the sky at night.\n_\nNote that this component uses the CAD environment's ray intersection methods,\nwhich can be fast for geometries with low complexity but does not scale well\nfor complex geometries or many test points. For such complex studies,\nhoneybee-radiance should be used.\n-"
}
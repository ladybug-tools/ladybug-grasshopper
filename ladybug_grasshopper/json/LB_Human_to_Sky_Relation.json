{
  "version": "1.4.0", 
  "nickname": "HumanToSky", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "human_points", 
        "description": "The points used to represent the human subject in the calculation\nof the fraction of the body exposed to sun. Note that these are\ngenerated even when _run is set to \"False\".", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "human_line", 
        "description": "Line representing the height of the human subject. Note that this\nis generated even when _run is set to \"False\".", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "fract_body_exp", 
        "description": "A data collection for the fraction of the body exposed to\ndirect sunlight at each hour of the year. This can be plugged into\nthe \"Solar MRT\" components in order to account for context shading\nin the computation of MRT.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "sky_exposure", 
        "description": "A single number between 0 and 1 for the fraction of the sky\nvault in human subject\u2019s view. This can be plugged into the\n\"Solar MRT\" components in order to account for context shading\nin the computation of MRT.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "north_", 
      "description": "A number between -360 and 360 for the counterclockwise\ndifference between the North and the positive Y-axis in degrees.\n90 is West and 270 is East. This can also be Vector for the\ndirection to North. (Default: 0)", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_location", 
      "description": "A ladybug Location that has been output from the \"LB Import EPW\"\ncomponent, the \"LB Import Location\" component, or the \"LB Construct\nLocation\" component. This will be used to compute hourly sun\npositions for the fract_body_exp.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_position", 
      "description": "A point for the position of the human subject in the Rhino scene.\nThis is used to understand where a person is in relationship to the\n_context. The point input here should be at the feet of the human\na series of points will be generated above. This can also be a list\nof points, which will result in several outputs.", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_context", 
      "description": "Rhino Breps and/or Rhino Meshes representing context geometry\nthat can block the human subject's direct sun and view to the sky.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_pt_count_", 
      "description": "A positive integer for the number of points used to represent\nthe human subject geometry. Points are evenly distributed over the\n_height_ and are used to compute fracitonal values for the\nfract_body_exp in the case that only some of the points can see the\nsun. When context shade around the subject is large or coarse,\nusing a single point is likely to return similar results as using\nseveral points. However, this number should be increased when\ncontext is detailed and has the potential to shade only part of\nthe human subject at a given time. (Default: 1).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_height_", 
      "description": "A number for the the height of the human subject in the current Rhino\nModel units. (Default: 1.8 m in the equivalent Rhino Model units;\nroughly the average height of a standing adult).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_cpu_count_", 
      "description": "An integer to set the number of CPUs used in the execution of the\nintersection calculation. If unspecified, it will automatically default\nto one less than the number of CPUs currently available on the\nmachine or 1 if only one processor is available.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the component and compute the human/sky relationship.\nIf set to \"False\" but all other required inputs are specified, this\ncomponent will output points showing the human subject.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Analyze Geometry", 
  "code": "\nimport math\n\ntry:\n    from ladybug_geometry.geometry2d.pointvector import Vector2D\n    from ladybug_geometry.geometry3d.pointvector import Point3D, Vector3D\n    from ladybug_geometry.geometry3d.line import LineSegment3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug.sunpath import Sunpath\n    from ladybug.viewsphere import view_sphere\n    from ladybug.datacollection import HourlyContinuousCollection\n    from ladybug.header import Header\n    from ladybug.analysisperiod import AnalysisPeriod\n    from ladybug.datatype.fraction import Fraction\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.togeometry import to_point3d, to_vector2d\n    from ladybug_{{cad}}.fromgeometry import from_point3d, from_vector3d, \\\n        from_linesegment3d\n    from ladybug_{{cad}}.intersect import join_geometry_to_mesh, intersect_mesh_rays\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree, \\\n        recommended_processor_count\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef human_height_points(position, height, pt_count):\n    \"\"\"Get a list of points and a line representing the human geometry.\n\n    Args:\n        position: {{Cad}} point for the position of the human.\n        height: Number for the height of the human.\n        pt_count: Integer for the number of points representing the human.\n\n    Returns:\n         A tuple with human points as first element and human line as second.\n         Both geomtries are {{Cad}} geometries.\n    \"\"\"\n    lb_feet_pt = to_point3d(position).move(Vector3D(0, 0, height / 100))\n    lb_hum_line = LineSegment3D(lb_feet_pt, Vector3D(0, 0, height))\n    lb_pts = [lb_hum_line.midpoint] if pt_count == 1 else \\\n        lb_hum_line.subdivide_evenly(pt_count - 1)\n    if len(lb_pts) == pt_count - 1:  # sometimes tolerance kills the last point\n        lb_pts.append(lb_feet_pt.move(Vector3D(0, 0, height)))\n    h_points = [from_point3d(pt) for pt in lb_pts]\n    return h_points, from_linesegment3d(lb_hum_line)\n\n\ndef fract_exposed_from_mtx(person_sun_int_matrix, day_pattern):\n    \"\"\"Get a Data Collection of fraction exposed values from an intersection matrix.\n\n    Args:\n        person_sun_int_matrix: An intersection matrix of 0s and 1s for the points\n            of a single person.\n        day_pattern: A list of 8760 booleans indicating whether the sun is\n            up (True) or down (Fasle).\n\n    Returns:\n         A data collection for the fraction of body exposed.\n     \"\"\"\n    pt_count = len(person_sun_int_matrix)\n    fract_per_sun = [sum(pt_int_ar) / pt_count for pt_int_ar in zip(*person_sun_int_matrix)]\n    fract_exp_vals = []\n    per_sun_i = 0\n    for is_sun in day_pattern:\n        if is_sun:\n            fract_exp_vals.append(fract_per_sun[per_sun_i])\n            per_sun_i += 1\n        else:\n            fract_exp_vals.append(0)\n    meta_dat = {'type': 'Fraction of Body Exposed to Direct Sun'}\n    fract_exp_head = Header(Fraction(), 'fraction', AnalysisPeriod(), meta_dat)\n    return HourlyContinuousCollection(fract_exp_head, fract_exp_vals)\n\n\ndef sky_exposure_from_mtx(person_sky_int_matrix, patch_weights):\n    \"\"\"Get a the sky exposure from an intersection matrix.\n\n    Args:\n        person_sky_int_matrix: An intersection matrix of 0s and 1s for the\n            points of a person intersected with the 145 tregenza patches.\n        patch_weights: A list of 145 weights to be applies to the patches.\n\n    Returns:\n         A value for the sky exposure of the person.\n     \"\"\"\n    pt_count = len(person_sky_int_matrix)\n    sky_exp_per_pt = [sum((r * w) / 145 for r, w in zip(int_list, patch_wghts))\n                      for int_list in person_sky_int_matrix]\n    return sum(sky_exp_per_pt) / pt_count\n\n\nif all_required_inputs(ghenv.Component):\n    # process the north input if specified\n    if north_ is not None:  # process the north_\n        try:\n            north_ = math.degrees(to_vector2d(north_).angle_clockwise(Vector2D(0, 1)))\n        except AttributeError:  # north angle instead of vector\n            north_ = float(north_)\n    else:\n        north_ = 0\n\n    # set the default point count, height, and cpu_count if unspecified\n    _pt_count_ = _pt_count_ if _pt_count_ is not None else 1\n    _height_ = _height_ if _height_ is not None else 1.8 / conversion_to_meters()\n    workers = _cpu_count_ if _cpu_count_ is not None else recommended_processor_count()\n\n    # create the points representing the human geometry\n    human_points = []\n    human_line = []\n    for pos in _position:\n        hpts, hlin = human_height_points(pos, _height_, _pt_count_)\n        human_points.extend(hpts)\n        human_line.append(hlin)\n\n    if _run:\n        # mesh the context for the intersection calculation\n        shade_mesh = join_geometry_to_mesh(_context)\n\n        # generate the sun vectors for each sun-up hour of the year\n        sp = Sunpath.from_location(_location, north_)\n        sun_vecs = []\n        day_pattern = []\n        for hoy in range(8760):\n            sun = sp.calculate_sun_from_hoy(hoy)\n            day_pattern.append(sun.is_during_day)\n            if sun.is_during_day:\n                sun_vecs.append(from_vector3d(sun.sun_vector_reversed))\n\n        # intersect the sun vectors with the context and compute fraction exposed\n        sun_int_matrix, angles = intersect_mesh_rays(\n            shade_mesh, human_points, sun_vecs, cpu_count=workers)\n        fract_body_exp = []\n        for i in range(0, len(human_points), _pt_count_):\n            fract_body_exp.append(\n                fract_exposed_from_mtx(sun_int_matrix[i:i + _pt_count_], day_pattern))\n\n        # generate the vectors and weights for sky exposure\n        sky_vecs = [from_vector3d(vec) for vec in view_sphere.tregenza_dome_vectors]\n        patch_wghts = view_sphere.dome_patch_weights(1)\n\n        # compute the sky exposure\n        sky_int_matrix, angles = intersect_mesh_rays(\n            shade_mesh, human_points, sky_vecs, cpu_count=workers)\n        sky_exposure = []\n        for i in range(0, len(human_points), _pt_count_):\n            sky_exposure.append(\n                sky_exposure_from_mtx(sky_int_matrix[i:i + _pt_count_], patch_wghts))\n", 
  "category": "Ladybug", 
  "name": "LB Human to Sky Relation", 
  "description": "Calculate parameters for the relationship between human geometry and the sky given\nthe position of a human subject and context geometry surrounding this position.\n_\nThe outputs of this component can be plugged into either the \"LB Outdoor Solar MRT\"\nor the \"LB Indoor Solar MRT\" in order to account for context shading around a\nhuman subject in these MRT calculations.\n-"
}
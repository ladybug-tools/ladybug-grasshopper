{
  "version": "0.1.3", 
  "nickname": "SkyMatrix", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "sky_mtx", 
        "description": "A sky matrix object containing the radiation coming from each patch\nof the sky. This can be used for a radiation study, a radition rose,\nor a sky dome visualization. It can also be deconstructed into its\nindividual values with the \"LB Deconstruct Matrix\" component.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "north_", 
      "description": "A number between -360 and 360 for the counterclockwise\ndifference between the North and the positive Y-axis in degrees.\n90 is West and 270 is East. This can also be Vector for the\ndirection to North. (Default: 0)", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_location", 
      "description": "A ladybug Location that has been output from the \"LB Import EPW\"\ncomponent or the \"LB Construct Location\" component.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_direct_rad", 
      "description": "An annual hourly DataCollection of Direct Normal Radiation such\nas that which is output from the \"LB Import EPW\" component or the\n\"LB Import STAT\" component.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_diffuse_rad", 
      "description": "An annual hourly DataCollection of Diffuse Horizontal Radiation\nsuch as that which is output from the \"LB Import EPW\" component or\nthe \"LB Import STAT\" component.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_hoys_", 
      "description": "A number or list of numbers between 0 and 8760 that respresent\nthe hour(s) of the year for which to generate the sky matrix. The\n\"LB Calculate HOY\" component can output this number given a month,\nday and hour. The \"LB Analysis Period\" component can output a\nlist of HOYs within a certain hour or date range. By default,\nthe matrix will be for the entire year.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "high_density_", 
      "description": "A Boolean to indicate whether the higher-density Reinhart\nsky matrix should be generated (True), which has roughly 4 times\nthe sky patches as the (default) original Tregenza sky (False).\nNote that, while the Reinhart sky has a higher resolution and is\nmore accurate, it will result in considerably longer calculation\ntime for incident radiation studies. The difference in sky\nresolution can be observed with the (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_folder_", 
      "description": "The folder in which the Radiance commands are executed to\nproduce the sky matrix. If None, it will be written to Ladybug's\ndefault EPW folder.", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Visualize Data", 
  "code": "\nimport os\nimport subprocess\nimport math\n\ntry:\n    from ladybug_geometry.geometry2d.pointvector import Vector2D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug.wea import Wea\n    from ladybug.viewsphere import view_sphere\n    from ladybug.dt import DateTime\n    from ladybug.config import folders as lb_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.togeometry import to_vector2d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, objectify_output\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\n# TODO: Remove dependency on honeybee + Radiance after genskymtx is in its own LB extension\ntry:\n    from honeybee_radiance.config import folders as hb_folders\n    rad_url = 'https://github.com/LBNL-ETA/Radiance/releases/tag/012cb178'\n    assert hb_folders.radiance_path is not None, \\\n        'No Radiance installation was found on this machine.\\n' \\\n        'Download and install Radiance from\\n{}.'.format(rad_url)\n    assert hb_folders.radiance_version[:2] >= (5, 3), \\\n        'The installed Radiance is not version 5.3 or greater.\\n' \\\n        'Download and install Radiance from\\n{}.'.format(rad_url)\n    # get the path to the gemdaymtx executable\n    gendaymtx_exe = os.path.join(hb_folders.radbin_path, 'gendaymtx.exe') if \\\n        os.name == 'nt' else os.path.join(hb_folders.radbin_path, 'gendaymtx')\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\n\n# constants for converting RGB values output by gendaymtx to broadband radiation\nPATCHES_PER_ROW = {\n    1: view_sphere.TREGENZA_PATCHES_PER_ROW + (1,),\n    2: view_sphere.REINHART_PATCHES_PER_ROW + (1,)\n}\nPATCH_ROW_COEFF = {\n    1 : view_sphere.TREGENZA_COEFFICIENTS,\n    2: view_sphere.REINHART_COEFFICIENTS\n}\n\n\ndef broadband_radiation(patch_row_str, row_number, wea_duration, sky_density=1):\n    \"\"\"Parse a row of gendaymtx RGB patch data in W/sr/m2 to radiation in kWh/m2.\n\n    This includes aplying broadband weighting to the RGB bands, multiplication\n    by the steradians of each patch, and multiplying by the duration of time that\n    they sky matrix represents in hours.\n\n    Args:\n        patch_row_str: Text string for a single row of RGB patch data.\n        row_number: Interger for the row number that the patch corresponds to.\n        sky_density: Integer (either 1 or 2) for the density.\n        wea_duration: Number for the duration of the Wea in hours. This is used\n            to convert between the average value output by the command and the\n            cumulative value that is needed for all ladybug analyses.\n    \"\"\"\n    R, G, B = patch_row_str.split(' ')\n    weight_val = 0.265074126 * float(R) + 0.670114631 * float(G) + 0.064811243 * float(B)\n    return weight_val * PATCH_ROW_COEFF[sky_density][row_number] * wea_duration / 1000\n\n\ndef parse_mtx_data(data_str, wea_duration, sky_density=1):\n    \"\"\"Parse a string of Radiance gendaymtx data to a list of radiation-per-patch.\n\n    This function handles the removing of the header and the conversion of the\n    RGB irradianc-=per-steraidian values to broadband radiation. It also removes\n    the first patch, which is the ground and is not used by Ladybug.\n\n    Args:\n        data_str: The string that has been output by gendaymtx to stdout.\n        wea_duration: Number for the duration of the Wea in hours. This is used\n            to convert between the average value output by the command and the\n            cumulative value that is needed for all ladybug analyses.\n        sky_density: Integer (either 1 or 2) for the density.\n    \"\"\"\n    # split lines and remove the header, ground patch and last line break\n    data_lines = data_str.split('\\n')\n    patch_lines = data_lines[9:-1]\n\n    # loop through the rows and convert the radiation RGB values\n    broadband_irr = []\n    patch_counter = 0\n    for i, row_patch_count in enumerate(PATCHES_PER_ROW[sky_density]):\n        row_slice = patch_lines[patch_counter:patch_counter + row_patch_count]\n        irr_vals = (broadband_radiation(row, i, wea_duration, sky_density)\n                    for row in row_slice)\n        broadband_irr.extend(irr_vals)\n        patch_counter += row_patch_count\n    return broadband_irr\n\n\nif all_required_inputs(ghenv.Component):\n    # process and set defaults for all of the global inputs\n    if north_ is not None:  # process the north_\n        try:\n            north_ = math.degrees(\n                to_vector2d(north_).angle_clockwise(Vector2D(0, 1)))\n        except AttributeError:  # north angle instead of vector\n            north_ = float(north_)\n    else:\n        north_ = 0\n    density = 2 if high_density_ else 1\n\n    # filter the radiation by _hoys if they are input\n    if len(_hoys_) != 0:\n        _direct_rad = _direct_rad.filter_by_hoys(_hoys_)\n        _diffuse_rad = _diffuse_rad.filter_by_hoys(_hoys_)\n\n    # create the wea and write it to the default_epw_folder\n    wea = Wea(_location, _direct_rad, _diffuse_rad)\n    wea_duration = len(wea) / wea.timestep\n    wea_folder = _folder_ if _folder_ is not None else \\\n        os.path.join(lb_folders.default_epw_folder, 'sky_matrices')\n    metd = _direct_rad.header.metadata\n    wea_basename = os.path.join(wea_folder, metd['city'].replace(' ', '_')) \\\n        if 'city' in metd else 'unnamed'\n    wea_file =wea.write(wea_basename)\n\n    # execute the Radiance gendaymtx command\n    use_shell = True if os.name == 'nt' else False\n    # command for direct patches\n    cmds = [gendaymtx_exe, '-m', str(density), '-d', '-O1', '-A', wea_file]\n    process = subprocess.Popen(cmds, stdout=subprocess.PIPE, shell=use_shell)\n    stdout = process.communicate()\n    dir_data_str = stdout[0]\n    # command for diffuse patches\n    cmds = [gendaymtx_exe, '-m', str(density), '-s', '-O1', '-A', wea_file]\n    process = subprocess.Popen(cmds, stdout=subprocess.PIPE, shell=use_shell)\n    stdout = process.communicate()\n    diff_data_str = stdout[0]\n\n    # parse the data into a single matrix\n    dir_vals = parse_mtx_data(dir_data_str, wea_duration, density)\n    diff_vals = parse_mtx_data(diff_data_str, wea_duration, density)\n\n    # collect sky metadata like the north, which will be used by other components\n    metadata = [north_]\n    if _hoys_:\n        metadata.extend([DateTime.from_hoy(h) for h in (_hoys_[0], _hoys_[-1])])\n    else:\n        metadata.extend([wea.analysis_period.st_time, wea.analysis_period.end_time])\n    for key, val in _direct_rad.header.metadata.items():\n        metadata.append('{} : {}'.format(key, val))\n\n    # wrap everything together into an object to output from the component\n    mtx_data = (metadata, dir_vals, diff_vals)\n    sky_mtx = objectify_output('Cumulative Sky Matrix', mtx_data)\n", 
  "category": "Ladybug", 
  "name": "LB Cumulative Sky Matrix", 
  "description": "Get a matrix containing radiation values from each patch of a sky dome.\n_\nCreating this matrix is a necessary pre-step before doing incident radiation\nanalysis with Rhino geometry or generating a radiation rose.\n_\nThis component uses Radiance's gendaymtx function to calculate the radiation\nfor each patch of the sky. Gendaymtx is written by Ian Ashdown and Greg Ward.\nMorere information can be found in Radiance manual at:\nhttp://www.radiance-online.org/learning/documentation/manual-pages/pdfs/gendaymtx.pdf\n-"
}
{
  "version": "0.1.1", 
  "nickname": "SkyDome", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "mesh", 
        "description": "A colored mesh representing the intensity of radiation for each of\nthe sky patches within the sky dome.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "compass", 
        "description": "A set of circles, lines and text objects that mark the cardinal\ndirections in relation to the sky dome.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "A legend showing the kWh/m2 values that correspond to the colors\nof the mesh.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the title of the sunpath.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "patch_vecs", 
        "description": "A list of vectors for each of the patches of the sky dome.\nAll vectors are unit vectors and point from the center towards each\nof the patches. They can be used to construct visualizations of the\nrays used to perform radiation analysis.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "patch_values", 
        "description": "Radiation values for each of the sky patches in kWh/m2. This\nwill be one list if show_comp_ is \"False\" and a list of 3 lists (aka.\na Data Tree) for total, direct, diffuse if show_comp_ is \"True\".", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh_values", 
        "description": "Radiation values for each face of the dome mesh in kWh/m2. This\ncan be used to post-process the radiation data and then regenerate\nthe dome visualization using the mesh output from this component\nand the \"LB Spatial Heatmap\" component. Examples of useful post-\nprocessing include converting the units to something other than\nkWh/m2, inverting the +/- sign of radiation values depending on\nwhether radiation is helpful or harmful to building thermal loads,\netc. This will be one list if show_comp_ is \"False\" and a list of\n3 lists (aka. a Data Tree) for total, direct, diffuse if show_comp_\nis \"True\".", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_sky_mtx", 
      "description": "A Sky Matrix from the \"LB Cumulative Sky Matrix\" component, which\ndescribes the radiation coming from the various patches of the sky.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_center_pt_", 
      "description": "A point for the center of the dome. (Default: (0, 0, 0))", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_scale_", 
      "description": "A number to set the scale of the sky dome. The default is 1,\nwhich corresponds to a radius of 100 meters in the current Rhino\nmodel's unit system.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "projection_", 
      "description": "Optional text for the name of a projection to use from the sky\ndome hemisphere to the 2D plane. If None, a 3D sky dome will be drawn\ninstead of a 2D one. (Default: None) Choose from the following:\n* Orthographic\n* Stereographic", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "show_comp_", 
      "description": "Boolean to indicate whether only one dome with total radiation\nshould be displayed (False) or three domes with the solar radiation\ncomponents (total, direct, and diffuse) should be shown. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "An optional LegendParameter object to change the display of the\nsky dome (Default: None).", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Visualize Data", 
  "code": "\nimport math\n\ntry:\n    from ladybug_geometry.geometry2d.pointvector import Point2D\n    from ladybug_geometry.geometry3d.pointvector import Point3D, Vector3D\n    from ladybug_geometry.geometry3d.mesh import Mesh3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug.viewsphere import view_sphere\n    from ladybug.compass import Compass\n    from ladybug.graphic import GraphicContainer\n    from ladybug.legend import LegendParameters\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.togeometry import to_point3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_vector3d\n    from ladybug_{{cad}}.fromobjects import legend_objects, compass_objects\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, \\\n        de_objectify_output, list_to_data_tree\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef draw_dome(dome_data, center, dome_name, legend_par):\n    \"\"\"Draw the dome mesh, compass, legend, and title for a sky dome.\n\n    Args:\n        dome_data: List of radiation values for the dome data\n        center: Point3D for the center of the sun path.\n        dome_name: Text for the dome name, which will appear in the title.\n        legend_par: Legend parameters to be used for the dome\n\n    Returns:\n        dome_mesh: A colored mesh for the dome based on dome_data.\n        dome_compass: A compass for the dome.\n        dome_legend: A leend for the colored dome mesh.\n        dome_title: A title for the dome.\n        values: A list of radiation values that align with the dome_mesh faces.\n    \"\"\"\n    # create the dome mesh and ensure patch values align with mesh faces\n    if len(dome_data) == 145:  # tregenza sky\n        lb_mesh = view_sphere.tregenza_dome_mesh_high_res.scale(radius)\n        values = []  # high res dome has 3 x 3 faces per patch; we must convert\n        tot_i = 0  # track the total number of patches converted\n        for patch_i in view_sphere.TREGENZA_PATCHES_PER_ROW:\n            row_vals = []\n            for val in dome_data[tot_i:tot_i + patch_i]:\n                row_vals.extend([val] * 3)\n            for i in range(3):\n                values.extend(row_vals)\n            tot_i += patch_i\n        values = values + [dome_data[-1]] * 18  # last patch has triangular faces\n    else:  #reinhart sky\n        lb_mesh = view_sphere.reinhart_dome_mesh.scale(radius)\n        values = dome_data + [dome_data[-1]] * 11  # last patch has triangular faces\n\n    # move and/or rotate the mesh as needed\n    if north != 0:\n        lb_mesh = lb_mesh.rotate_xy(math.radians(north), Point3D())\n    if center != Point3D():\n        lb_mesh = lb_mesh.move(Vector3D(center.x, center.y, center.z))\n\n    # project the mesh if requested\n    if projection_ is not None:\n        if projection_ == 'Orthographic':\n            pts = (Compass.point3d_to_orthographic(pt) for pt in lb_mesh.vertices)\n        elif projection_ == 'Stereographic':\n            pts = (Compass.point3d_to_stereographic(pt, radius, center)\n                   for pt in lb_mesh.vertices)\n        else:\n            raise ValueError(\n                'Projection type \"{}\" is not recognized.'.format(projection_))\n        pts3d = tuple(Point3D(pt.x, pt.y, z) for pt in pts)\n        lb_mesh = Mesh3D(pts3d, lb_mesh.faces)\n\n    # output the dome visualization, including legend and compass\n    move_fac = radius * 0.15\n    min_pt = lb_mesh.min.move(Vector3D(-move_fac, -move_fac, 0))\n    max_pt = lb_mesh.max.move(Vector3D(move_fac, move_fac, 0))\n    graphic = GraphicContainer(values, min_pt, max_pt, legend_par)\n    graphic.legend_parameters.title = 'kWh/m2'\n    lb_mesh.colors = graphic.value_colors\n    dome_mesh = from_mesh3d(lb_mesh)\n    dome_legend = legend_objects(graphic.legend)\n    dome_compass = compass_objects(\n        Compass(radius, Point2D(center.x, center.y), north), z, None, projection_,\n        graphic.legend_parameters.font)\n\n    # construct a title from the metadata\n    st, end = metadata[1], metadata[2]\n    time_str = '{} - {}'.format(st, end) if st != end else st\n    title_txt = '{} Radiation\\n{}\\n{}'.format(\n        dome_name, time_str, '\\n'.join([dat for dat in metadata[3:]]))\n    dome_title = text_objects(title_txt, graphic.lower_title_location,\n                              graphic.legend_parameters.text_height,\n                              graphic.legend_parameters.font)\n\n    return dome_mesh, dome_compass, dome_legend, dome_title, values\n\n\nif all_required_inputs(ghenv.Component):\n    # set defaults for global variables\n    _scale_ = 1 if _scale_ is None else _scale_\n    radius = (100 * _scale_) / conversion_to_meters()\n    if _center_pt_ is not None:  # process the center point into a Point2D\n        center_pt3d = to_point3d(_center_pt_)\n        z = center_pt3d.z\n    else:\n        center_pt3d, z = Point3D(), 0\n\n    # deconstruct the sky matrix and derive key data from it\n    metadata, direct, diffuse = de_objectify_output(_sky_mtx)\n    north = metadata[0]  # first item is the north angle\n    sky_type = 1 if len(direct) == 145 else 2  # i for tregenza; 2 for reinhart\n    total = [dirr + difr for dirr, difr in zip(direct, diffuse)] # total radiation\n\n    # override the legend default min and max to make sense for domes\n    l_par = legend_par_.duplicate() if legend_par_ is not None else LegendParameters()\n    if l_par.min is None:\n        l_par.min = 0\n    if l_par.max is None:\n        l_par.max = max(total)\n\n    # output patch patch vectors\n    patch_vecs_lb = view_sphere.tregenza_dome_vectors if len(total) == 145 \\\n        else view_sphere.reinhart_dome_vectors\n    patch_vecs = [from_vector3d(vec) for vec in patch_vecs_lb]\n\n    # create the dome meshes\n    if not show_comp_:  # only create the total dome mesh\n        mesh, compass, legend, title, mesh_values = \\\n            draw_dome(total, center_pt3d, 'Total', l_par)\n        patch_values = total\n    else:  # create domes for total, direct and diffuse\n        # loop through the 3 radiation types and produce a dome\n        mesh, compass, legend, title, mesh_values = [], [], [], [], []\n        rad_types = ('Total', 'Direct', 'Diffuse')\n        rad_data = (total, direct, diffuse)\n        for dome_i in range(3):\n            cent_pt = Point3D(center_pt3d.x + radius * 3 * dome_i,\n                              center_pt3d.y, center_pt3d.z)\n            dome_mesh, dome_compass, dome_legend, dome_title, dome_values = \\\n                draw_dome(rad_data[dome_i], cent_pt, rad_types[dome_i], l_par)\n            mesh.append(dome_mesh)\n            compass.extend(dome_compass)\n            legend.extend(dome_legend)\n            title.append(dome_title)\n            mesh_values.append(dome_values)\n        patch_values = list_to_data_tree(rad_data)\n        mesh_values = list_to_data_tree(mesh_values)\n", 
  "category": "Ladybug", 
  "name": "LB Sky Dome", 
  "description": "Visualize a sky matrix from the \"LB Cumulative Sky Matrix\" component as a colored\ndome, subdivided into patches with a radiation value for each patch.\n-"
}
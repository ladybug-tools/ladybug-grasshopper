{
  "version": "1.6.0", 
  "nickname": "SrfRayTrace", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "rays", 
        "description": "A list of polylines representing the sun rays traced forward onto\nthe _source_geo and then through the context_.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "int_pts", 
        "description": "A data tree of intersection points one one branch for each of the\nrays above.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_vector", 
      "description": "A sun vector (typically from the \"LB SunPath\" component), which will\nbe used to evaluate the light boucing off of the _source_geo and\nthrough the context_.", 
      "type": "Vector3d", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_source_geo", 
      "description": "A brep or mesh representing a surface off of which sun rays first\nbounce. Lists of breps or meshes are also acceptable. These surfaces\nwill be used to generate the initial sun rays in a grid-like pattern.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "context_", 
      "description": "Breps or meshes for conext geometry, which will reflect the sun rays\nafter they bounce off of the _source_geo.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_grid_size", 
      "description": "A positive number in Rhino model units for the average distance between\nsun ray points to generate along the _source_geo.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_bounce_count_", 
      "description": "An positive integer for the number of ray bounces to trace\nthe sun rays forward. (Default: 1).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_first_length_", 
      "description": "A positive number in Rhino model units for the length of the\nsun ray before the first bounce. If unspecified, this will be\nthe diagonal of the bounding box surrounding all input geometries.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_last_length_", 
      "description": "A positive number in Rhino model units representing the length\nof the sun ray after the last bounce. If unspecified, this will be\nthe diagonal of the bounding box surrounding all input geometries.", 
      "type": "double", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Analyze Geometry", 
  "code": "\nimport math\n\ntry:\n    from ladybug_geometry.geometry3d.ray import Ray3D\n    from ladybug_geometry.geometry3d.polyline import Polyline3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.togeometry import to_joined_gridded_mesh3d, to_point3d, \\\n        to_vector3d\n    from ladybug_{{cad}}.fromgeometry import from_point3d, from_vector3d, from_ray3d, \\\n        from_polyline3d\n    from ladybug_{{cad}}.intersect import join_geometry_to_brep, bounding_box_extents, \\\n        trace_ray, normal_at_point\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree, \\\n        hide_output\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # check the _bounce_count_\n    _bounce_count_ = 0 if _bounce_count_ is None else _bounce_count_ - 1\n    assert _bounce_count_ >= 0, 'The input _bounce_count_ must be greater '  \\\n        'than zero. Got {}.'.format(_bounce_count_ + 1)\n    # process the input sun vector\n    lb_vec = to_vector3d(_vector).normalize()\n    neg_lb_vec = -lb_vec\n    vec = from_vector3d(lb_vec)\n\n    # convert all of the _source_geo and contex into a single Brep for ray tracing\n    rtrace_brep = join_geometry_to_brep(_source_geo + context_)\n\n    # autocompute the first and last bounce length if it's unspecified\n    if _first_length_ is None or _last_length_ is None:\n        max_pt, min_pt = (to_point3d(p) for p in bounding_box_extents(rtrace_brep))\n        diag_dist = max_pt.distance_to_point(min_pt)\n        _first_length_ = diag_dist if _first_length_ is None else _first_length_\n        _last_length_ = diag_dist if _last_length_ is None else _last_length_\n\n    # create the gridded mesh from the _source_geo and set up the starting rays\n    study_mesh = to_joined_gridded_mesh3d(_source_geo, _grid_size)\n    move_vec = neg_lb_vec * _first_length_\n    source_points = [pt + move_vec for pt in study_mesh.face_centroids]\n    lb_rays = [Ray3D(pt, lb_vec) for pt in source_points]\n    start_rays = [from_ray3d(ray) for ray in lb_rays]\n\n    # trace each ray through the geometry\n    cutoff_ang = math.pi / 2\n    rtrace_geo = [rtrace_brep]\n    rays, int_pts = [], []\n    for ray, pt, norm in zip(start_rays, source_points, study_mesh.face_normals):\n        if norm.angle(neg_lb_vec) < cutoff_ang:\n            pl_pts = trace_ray(ray, rtrace_geo, _bounce_count_ + 2)\n            # if the intersection was successful, create a polyline represeting the ray\n            if pl_pts:\n                # gather all of the intersection points\n                all_pts = [pt]\n                for i_pt in pl_pts:\n                    all_pts.append(to_point3d(i_pt))\n                # compute the last point\n                if len(pl_pts) < _bounce_count_ + 2:\n                    int_norm = normal_at_point(rtrace_brep, pl_pts[-1])\n                    int_norm = to_vector3d(int_norm)\n                    last_vec = all_pts[-2] - all_pts[-1]\n                    last_vec = last_vec.normalize()\n                    final_vec = last_vec.reflect(int_norm).reverse()\n                    final_pt = all_pts[-1] + (final_vec * _last_length_)\n                    all_pts.append(final_pt)\n                # create a Polyline3D from the points\n                lb_ray_line = Polyline3D(all_pts)\n                rays.append(from_polyline3d(lb_ray_line))\n                int_pts.append([from_point3d(p) for p in all_pts])\n\n    # convert the intersection points to a data tree\n    int_pts = list_to_data_tree(int_pts)\n    hide_output(ghenv.Component, 1)\n", 
  "category": "Ladybug", 
  "name": "LB Surface Ray Tracing", 
  "description": "Get a ray tracing visualization of direct sunlight rays reflected off of _source_geo\nand subsequently bouncing through a set of context_ geometries.\n_\nExamples where this visualization could be useful include understading the\nreflection of light by a light shelf or testing to see whether a parabolic\nglass or metal building geometry might focus sunlight to dangerous levels at\ncertain times of the year.\n_\nNote that this component assumes that all sun light is reflected specularly\n(like a mirror) and, for more detailed raytracing analysis with diffuse\nscattering, the Honeybee Radiance components should be used.\n-"
}
{
  "version": "1.6.0", 
  "nickname": "GenPts", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "points", 
        "description": "Test points at the center of each mesh face.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "vectors", 
        "description": "Vectors for the normal direction at each of the points.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "face_areas", 
        "description": "Area of each mesh face.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh", 
        "description": "Analysis mesh that can be passed to the \"LB Spatial Heatmap\" component.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_geometry", 
      "description": "Brep or Mesh from which to generate the points and grid.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_grid_size", 
      "description": "Number for the size of the test grid.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_offset_dist_", 
      "description": "Number for the distance to move points from the surfaces\nof the input _geometry.  Typically, this should be a small positive\nnumber to ensure points are not blocked by the mesh. (Default: 0).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "quad_only_", 
      "description": "Boolean to note whether meshing should be done using Rhino's\ndefaults (False), which fills the entire _geometry to the edges\nwith both quad and tringulated faces, or a mesh with only quad\nfaces should be generated.\n_\nFOR ADVANCED USERS: This input can also be a vector object that will\nbe used to set the orientation of the quad-only grid. Note that,\nif a vector is input here that is not aligned with the plane of\nthe input _geometry, an error will be raised.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "4 :: Extra", 
  "code": "\ntry:\n    from ladybug_geometry.geometry3d.plane import Plane\n    from ladybug_geometry.geometry3d.face import Face3D\n    from ladybug_geometry.geometry3d.mesh import Mesh3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.togeometry import to_gridded_mesh3d, to_mesh3d, \\\n        to_face3d, to_vector3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_point3d, from_vector3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # check the input and generate the mesh.\n    _offset_dist_ = _offset_dist_ or 0\n    if quad_only_:  # use Ladybug's built-in meshing methods\n        lb_faces = to_face3d(_geometry)\n        try:\n            x_axis = to_vector3d(quad_only_)\n            lb_faces = [Face3D(f.boundary, Plane(f.normal, f[0], x_axis), f.holes)\n                        for f in lb_faces]\n        except AttributeError:\n            pass  # no plane connected; juse use default orientation\n        lb_meshes = []\n        for geo in lb_faces:\n            try:\n                lb_meshes.append(geo.mesh_grid(_grid_size, offset=_offset_dist_))\n            except AssertionError:  # tiny geometry not compatible with quad faces\n                continue\n        if len(lb_meshes) == 0:\n            lb_mesh = None\n        elif len(lb_meshes) == 1:\n            lb_mesh = lb_meshes[0]\n        elif len(lb_meshes) > 1:\n            lb_mesh = Mesh3D.join_meshes(lb_meshes)\n    else:  # use {{Cad}}'s default meshing\n        try:  # assume it's a {{Cad}} Brep\n            lb_mesh = to_gridded_mesh3d(_geometry, _grid_size, _offset_dist_)\n        except TypeError:  # assume it's a {{Cad}} Mesh\n            try:\n                lb_mesh = to_mesh3d(_geometry)\n            except TypeError:  # unidientified geometry type\n                raise TypeError(\n                    '_geometry must be a Brep or a Mesh. Got {}.'.format(type(_geometry)))\n\n    # generate the test points, vectors, and areas.\n    if lb_mesh is not None:\n        points = [from_point3d(pt) for pt in lb_mesh.face_centroids]\n        vectors = [from_vector3d(vec) for vec in lb_mesh.face_normals]\n        face_areas = lb_mesh.face_areas\n        mesh = [from_mesh3d(lb_mesh)]\n    else:\n        mesh = []", 
  "category": "Ladybug", 
  "name": "LB Generate Point Grid", 
  "description": "Genrate a mesh with corresponding test points from a Rhino Brep (or Mesh).\n_\nThe resulting mesh will be in a format that the \"LB Spatial Heatmap\" component\nwill accept.\n-"
}
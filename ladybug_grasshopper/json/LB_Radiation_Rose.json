{
  "version": "1.5.1", 
  "nickname": "RadRose", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "mesh", 
        "description": "A colored mesh of arrows, representing the intensity of radiation\nfrom different cardinal directions.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "compass", 
        "description": "A set of circles, lines and text objects that mark the cardinal\ndirections in relation to the radiation rose.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "orient_lines", 
        "description": "A list of line segments marking the orientation of each arrow.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "A legend showing the kWh/m2 or W/m2 values that correspond to the colors\nof the mesh.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the title of the radiation rose.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "dir_vecs", 
        "description": "A list of vectors for each of the directions the rose is facing.\nAll vectors are unit vectors.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "dir_values", 
        "description": "Radiation values for each of the rose directions in kWh/m2 or W/m2.\nThis will be one list if show_comp_ is \"False\" and a list of 3\nlists (aka. a Data Tree) for total, direct, diffuse if show_comp_\nis \"True\".", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "vis_set", 
        "description": "Script variable RadRose", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_sky_mtx", 
      "description": "A Sky Matrix from the \"LB Cumulative Sky Matrix\" component or the\n\"LB Benefit Sky Matrix\" component, which describes the radiation\ncoming from the various patches of the sky.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "context_", 
      "description": "Rhino Breps and/or Rhino Meshes representing context geometry\nthat can block solar radiation to the center of the radiation rose.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_dir_count_", 
      "description": "An integer greater than or equal to 3, which notes the number of\narrows to be generated for the radiation rose. (Default: 36).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_tilt_angle_", 
      "description": "A number between 0 and 90 that sets the vertical tilt angle (aka.\nthe altitude) for all of the directions. By default, the Radiation\nRose depicts the amount of solar energy received by a vertical\nwall (tilt_angle=0). The tilt_angle can be changed to a specific\nvalue to assess the solar energy falling on geometries that are not\nperfectly vertical, such as a tilted photovoltaic panel. (Default: 0).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_center_pt_", 
      "description": "A point for the center of the radiation rose. (Default: (0, 0, 0))", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_scale_", 
      "description": "A number to set the scale of the Radiation Rose. The default is 1,\nwhich corresponds to a radius of 100 meters in the current Rhino\nmodel's unit system.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_arrow_scale_", 
      "description": "A fractional number to note the scale of the radiation rose arrows\nin relation to the entire graphic. (Default: 1).", 
      "type": "double", 
      "default": 1
    }, 
    {
      "access": "item", 
      "name": "max_rad_", 
      "description": "An optional number to set the level of radiation or irradiance associated\nwith the full radius of the rose. If unspecified, this is determined\nby the maximum level of radiation in the input data but a number\ncan be specified here to fix this at a specific value. This is\nparticularly useful when comparing different roses to one another.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "irradiance_", 
      "description": "Boolean to note whether the radiation rose should be plotted with units\nof cumulative Radiation (kWh/m2) [False] or with units of average\nIrradiance (W/m2) [True]. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "show_comp_", 
      "description": "Boolean to indicate whether only one rose with total radiation\nshould be displayed (False) or three roses with the solar radiation\ncomponents (total, direct, and diffuse) should be shown. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "An optional LegendParameter object to change the display of the\nRadiation Rose.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Visualize Data", 
  "code": "\ntry:\n    from ladybug_geometry.geometry3d.pointvector import Point3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug.viewsphere import view_sphere\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_radiance.visualize.radrose import RadiationRose\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_radiance:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.togeometry import to_point3d\n    from ladybug_{{cad}}.fromgeometry import from_point3d, from_vector3d, \\\n        from_linesegment3d, from_mesh3d\n    from ladybug_{{cad}}.intersect import join_geometry_to_mesh, intersect_mesh_rays\n    from ladybug_{{cad}}.fromobjects import legend_objects, compass_objects\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, \\\n        objectify_output, list_to_data_tree\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef translate_rose(lb_mesh, lb_orient_lines, lb_compass, graphic, title_txt):\n    \"\"\"Translate radiation rose geometry into a format suitable for {{Cad}}.\n\n    Args:\n        lb_mesh: A ladybug Mesh3D for the rose.\n        lb_compass: A ladybug Compass object.\n        graphic: A GraphicContainer for the rose.\n        title_txt: Text for title of the rose.\n\n    Returns:\n        rose_mesh: A {{Cad}} colored mesh for the rose.\n        rose_compass: {{Cad}} objects for the rose compass.\n        rose_legend:  {{Cad}} objects for the rose legend.\n        rose_title: A bake-able title for the rose.\n    \"\"\"\n    # translate the rose visualization, including legend and compass\n    rose_mesh = from_mesh3d(lb_mesh)\n    rose_legend = legend_objects(graphic.legend)\n    rose_angles = list(range(0, 360, int(360 / _dir_count_)))\n    start, stop, step, rose_angles = 0, 360, 360 / _dir_count_, []\n    while start < stop:\n        rose_angles.append(start)\n        start += step\n    rose_angles = [int(n) for n in rose_angles]\n    if len(rose_angles) > 36:\n        rose_angles = rose_angles[::2]\n    rose_compass = compass_objects(\n        lb_compass, z, rose_angles, None, graphic.legend_parameters.font)\n    orient_lines = [from_linesegment3d(l) for l in lb_orient_lines]\n\n    # construct a title from the metadata\n    rose_title = text_objects(title_txt, graphic.lower_title_location,\n                              graphic.legend_parameters.text_height,\n                              graphic.legend_parameters.font)\n\n    return rose_mesh, orient_lines, rose_compass, rose_legend, rose_title\n\n\nif all_required_inputs(ghenv.Component):\n    # set defaults for global variables\n    _dir_count_ = 36 if _dir_count_ is None else _dir_count_\n    _tilt_angle_ = 0 if _tilt_angle_ is None else _tilt_angle_\n    _arrow_scale_ = 1 if _arrow_scale_ is None else _arrow_scale_\n    _scale_ = 1 if _scale_ is None else _scale_\n    radius = (100 * _scale_) / conversion_to_meters()\n    if _center_pt_ is not None:  # process the center point\n        center_pt3d = to_point3d(_center_pt_)\n        z = center_pt3d.z\n    else:\n        center_pt3d, z = Point3D(), 0\n\n    # compute the intersection matrix if context is specified\n    n_vecs = RadiationRose.radial_vectors(_dir_count_, _tilt_angle_)\n    dir_vecs = [from_vector3d(vec) for vec in n_vecs]\n    int_mtx = None\n    if len(context_) != 0 and context_[0] is not None:\n        shade_mesh = join_geometry_to_mesh(context_)\n        p_vecs = view_sphere.tregenza_sphere_vectors if len(_sky_mtx.data[1]) == 145 \\\n            else view_sphere.reinhart_sphere_vectors\n        patch_dirs = [from_vector3d(vec) for vec in p_vecs]\n        int_mtx, angles = intersect_mesh_rays(\n            shade_mesh, [from_point3d(center_pt3d)] * _dir_count_,\n            patch_dirs, dir_vecs, 1)\n\n    # create the RadiationRose object\n    rad_rose = RadiationRose(\n        _sky_mtx, int_mtx, _dir_count_, _tilt_angle_, legend_par_,\n        irradiance_, center_pt3d, radius, _arrow_scale_)\n\n    # create the rose visualization\n    if not show_comp_:  # only create the total rose mesh\n        mesh, orient_lines, compass, legend, title = \\\n            translate_rose(*rad_rose.draw(max_rad=max_rad_))\n        dir_values = rad_rose.total_values\n    else:  # create roses for total, direct and diffuse\n        # loop through the 3 radiation types and produce a rose\n        mesh, orient_lines, compass, legend, title = [], [], [], [], []\n        rad_types = ('total', 'direct', 'diffuse')\n        for rose_i in range(3):\n            cent_pt = Point3D(center_pt3d.x + radius * 3 * rose_i,\n                              center_pt3d.y, center_pt3d.z)\n            rose_mesh, rose_lines, rose_compass, rose_legend, rose_title = \\\n                translate_rose(*rad_rose.draw(rad_types[rose_i], cent_pt, max_rad_))\n            mesh.append(rose_mesh)\n            compass.extend(rose_compass)\n            orient_lines.extend(rose_lines)\n            legend.extend(rose_legend)\n            title.append(rose_title)\n        dir_values = list_to_data_tree(\n            (rad_rose.total_values, rad_rose.direct_values, rad_rose.diffuse_values))\n\n    # output the visualization set\n    vis_set = [rad_rose, max_rad_, show_comp_]\n    vis_set = objectify_output('VisualizationSet Aruments [RadiationRose]', vis_set)\n", 
  "category": "Ladybug", 
  "name": "LB Radiation Rose", 
  "description": "Visualize the solar energy falling on different direction as a rose.\n_\nBy default, the Radiation Rose depicts the amount of solar energy received\nby a vertical wall facing each of the directions of the compass rose.\n_\nThis is useful for understanding the radiation harm/benefit experienced by\ndifferent building orientations or the orientations with the highest peak cooling\nload (for sky matrices of clear skies). The tilt_angle can be used to assess the\nsolar energy falling on geometries that are not perfectly vertical, such\nas tilted photovoltaic panels.\n-"
}
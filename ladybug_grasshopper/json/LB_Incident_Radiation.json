{
  "version": "0.1.2", 
  "nickname": "IncidentRadiation", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "points", 
        "description": "The grid of points on the test _geometry that are be used to perform\nthe incident radiation analysis.  Note that these points are generated\neven when _run is set to \"False\" so that an estimate of study run\ntime can be obtained.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "results", 
        "description": "A list of numbers that aligns with the points. Each number indicates\nthe cumulative incident radiation received by each of the points\nfrom the sky matrix in kWh/m2.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "total", 
        "description": "A number for the total incident solar energy falling on all input geometry\nin kWh. Note that, unlike the radiation results above, which are\nnormlaized by area, these values are not area-normalized and so\nthe input geometry must be represented correctly in the Rhino\nmodel's unit system in order for this output to be meaningful.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh", 
        "description": "A colored mesh of the test _geometry representing the cumulative\nincident radiation received by the input _geometry.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "A legend showing the kWh/m2 that correspond to the colors of the mesh.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the study title.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "int_mtx", 
        "description": "A Matrix object that can be connected to the \"LB Deconstruct Matrix\"\ncomponent to obtain detailed patch-by-patch results of the study.\nEach sub-list of the matrix (aka. branch of the Data Tree) represents\none of the points used for analysis. The length of each sub-list\nmatches the number of sky patches in the input sky matrix (145 for\nthe default Tregenza sky and 577 for the high_density Reinhart sky).\nEach value in the sub-list is a value between 0 and 1 indicating the\nrelationship between the point and the patch of the sky. A value of\n\"0\", indicates that the patch is not visible for that point at all\nwhile a value of \"1\" indicates that the patch hits the surface that\nthe point represents head on.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_sky_mtx", 
      "description": "A Sky Matrix from the \"LB Cumulative Sky Matrix\" component, which\ndescribes the radiation coming from the various patches of the sky.\nThe \"LB Sky Dome\" component can be used to visualize any sky matrix\nto understand its relationship to the test geometry.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_geometry", 
      "description": "Rhino Breps and/or Rhino Meshes for which incident radiation analysis\nwill be conducted. If Breps are input, they will be subdivided using\nthe _grid_size to yeild individual points at which analysis will\noccur. If a Mesh is input, radiation analysis analysis will be\nperformed for each face of this mesh instead of subdividing it.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "context_", 
      "description": "Rhino Breps and/or Rhino Meshes representing context geometry\nthat can block solar radiation to the test _geometry.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_grid_size", 
      "description": "A positive number in Rhino model units for the size of grid\ncells at which the input _geometry will be subdivided for incident\nradiation analysis. The smaller the grid size, the higher the\nresolution of the analysis and the longer the calculation will take.\nSo it is recommended that one start with a large value here and\ndecrease the value as needed. However, the grid size should usually\nbe smaller than the dimensions of the smallest piece of the _geometry\nand context_ in order to yield meaningful results.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_offset_dist_", 
      "description": "A number for the distance to move points from the surfaces\nof the input _geometry.  Typically, this should be a small positive\nnumber to ensure points are not blocked by the mesh. (Default: 10 cm\nin the equivalent Rhino Model units).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "Optional legend parameters from the \"LB Legend Parameters\"\nthat will be used to customize the display of the results.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "parallel_", 
      "description": "Set to \"True\" to run the study using multiple CPUs. This can\ndramatically decrease calculation time but can interfere with\nother computational processes that might be running on your\nmachine. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the component and perform incident radiation\nanalysis. If set to \"False\" but all other required inputs are\nspecified, this component will output points showing the resolution\nof the analysis (but not run the study) so that an estimate of study\nrun time can be obtained.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Analyze Geometry", 
  "code": "\nimport math\ntry:  # python 2\n    from itertools import izip as zip\nexcept ImportError:  # python 3\n    pass\n\ntry:\n    from ladybug.viewsphere import view_sphere\n    from ladybug.graphic import GraphicContainer\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.togeometry import to_joined_gridded_mesh3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_point3d, from_vector3d\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.intersect import join_geometry_to_mesh, intersect_mesh_rays\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, hide_output, \\\n        show_output, objectify_output, de_objectify_output\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # set the default offset distance\n    _offset_dist_ = _offset_dist_ if _offset_dist_ is not None \\\n        else 0.1 / conversion_to_meters()\n\n    # create the gridded mesh from the geometry\n    study_mesh = to_joined_gridded_mesh3d(_geometry, _grid_size, _offset_dist_)\n    points = [from_point3d(pt) for pt in study_mesh.face_centroids]\n\n    if _run:  # run the entire study\n        # hide the study points and mesh the geometry and context\n        hide_output(ghenv.Component, 1)\n        shade_mesh = join_geometry_to_mesh(_geometry + context_)\n\n        # deconstruct the matrix and get the sky dome vectors\n        mtx = de_objectify_output(_sky_mtx)\n        total_sky_rad = [dir_rad + dif_rad for dir_rad, dif_rad in zip(mtx[1], mtx[2])]\n        lb_vecs = view_sphere.tregenza_dome_vectors if len(total_sky_rad) == 145 \\\n            else view_sphere.reinhart_dome_vectors\n        if mtx[0][0] != 0:  # there is a north input for sky; rotate vectors\n            north_angle = math.radians(mtx[0][0])\n            lb_vecs = [vec.rotate_xy(north_angle) for vec in lb_vecs]\n        sky_vecs = [from_vector3d(vec) for vec in lb_vecs]\n\n        # intersect the rays with the mesh\n        normals = [from_vector3d(vec) for vec in study_mesh.face_normals]\n        int_matrix_init, angles = intersect_mesh_rays(\n            shade_mesh, points, sky_vecs, normals, parallel=parallel_)\n\n        # compute the results\n        results = []\n        int_matrix = []\n        for int_vals, angles in zip(int_matrix_init, angles):\n            pt_rel = [ival * math.cos(ang) for ival, ang in zip(int_vals, angles)]\n            int_matrix.append(pt_rel)\n            rad_result = sum(r * w for r, w in zip(pt_rel, total_sky_rad))\n            results.append(rad_result)\n\n        # output the intersection matrix and compute total radiation\n        int_mtx = objectify_output('Geometry/Sky Intersection Matrix', int_matrix)\n        unit_conv = conversion_to_meters() ** 2\n        total = 0\n        for rad, area in zip(results, study_mesh.face_areas):\n            total += rad * area * unit_conv\n\n        # create the mesh and legend outputs\n        graphic = GraphicContainer(results, study_mesh.min, study_mesh.max, legend_par_)\n        graphic.legend_parameters.title = 'kWh/m2'\n        title = text_objects(\n            'Incident Radiation', graphic.lower_title_location,\n            graphic.legend_parameters.text_height * 1.5,\n            graphic.legend_parameters.font)\n\n        # create all of the visual outputs\n        study_mesh.colors = graphic.value_colors\n        mesh = from_mesh3d(study_mesh)\n        legend = legend_objects(graphic.legend)\n\n    else:  # only show the points\n        show_output(ghenv.Component, 1)\n", 
  "category": "Ladybug", 
  "name": "LB Incident Radiation", 
  "description": "Calculate the incident radiation on geometry using a sky matrix from the \"Cumulative\nSky Matrix\" component.\n_\nSuch studies of incident radiation can be used to apprxomiate the energy that can\nbe collected from photovoltaic or solar thermal systems. They are also useful\nfor evaluating the impact of a building's windows on both energy use and the\nsize/cost of cooling systems. For studies of cooling system size/cost, a sky\nmatrix derived from the STAT file's clear sky radiation should be used. For\nstudies of energy use impact, such as the evaluation of passive solar heating\nor the potential for excessive cooling energy use, a matrix from EPW radiation\nshould be used.\n_\nNote that NO REFLECTIONS OF SOLAR ENERGY ARE INCLUDED IN THE ANALYSIS\nPERFORMED BY THIS COMPONENT and it is important to bear in mind that vertical\nsurfaces typically receive 20% - 30% of their solar energy from reflection off\nof the ground. Also note that this component uses the CAD environment's ray\nintersection methods, which can be fast for geometries with low complexity\nbut does not scale well for complex geometries or many test points. For such\ncomplex cases and situations where relfection of solar energy are important,\nhoneybee-radiance should be used.\n-"
}
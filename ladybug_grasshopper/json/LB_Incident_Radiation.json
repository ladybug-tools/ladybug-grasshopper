{
  "version": "1.7.0", 
  "nickname": "IncidentRadiation", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "points", 
        "description": "The grid of points on the test _geometry that are be used to perform\nthe incident radiation analysis.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "results", 
        "description": "A list of numbers that aligns with the points. Each number indicates\nthe cumulative incident radiation received by each of the points\nfrom the sky matrix in kWh/m2.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "total", 
        "description": "A number for the total incident solar energy falling on all input geometry\nin kWh. Note that, unlike the radiation results above, which are\nnormlaized by area, these values are not area-normalized and so\nthe input geometry must be represented correctly in the Rhino\nmodel's unit system in order for this output to be meaningful.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh", 
        "description": "A colored mesh of the test _geometry representing the cumulative\nincident radiation received by the input _geometry.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "A legend showing the kWh/m2 that correspond to the colors of the mesh.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the study title.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "int_mtx", 
        "description": "A Matrix object that can be connected to the \"LB Deconstruct Matrix\"\ncomponent to obtain detailed patch-by-patch results of the study.\nEach sub-list of the matrix (aka. branch of the Data Tree) represents\none of the points used for analysis. The length of each sub-list\nmatches the number of sky patches in the input sky matrix (145 for\nthe default Tregenza sky and 577 for the high_density Reinhart sky).\nEach value in the sub-list is a value between 0 and 1 indicating the\nrelationship between the point and the patch of the sky. A value of\n\"0\", indicates that the patch is not visible for that point at all\nwhile a value of \"1\" indicates that the patch hits the surface that\nthe point represents head on.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_sky_mtx", 
      "description": "A Sky Matrix from the \"LB Cumulative Sky Matrix\" component or the\n\"LB Benefit Sky Matrix\" component, which describes the radiation\ncoming from the various patches of the sky. The \"LB Sky Dome\"\ncomponent can be used to visualize any sky matrix to understand\nits relationship to the test geometry.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_geometry", 
      "description": "Rhino Breps and/or Rhino Meshes for which incident radiation analysis\nwill be conducted. If Breps are input, they will be subdivided using\nthe _grid_size to yeild individual points at which analysis will\noccur. If a Mesh is input, radiation analysis analysis will be\nperformed for each face of this mesh instead of subdividing it.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "context_", 
      "description": "Rhino Breps and/or Rhino Meshes representing context geometry\nthat can block solar radiation to the test _geometry.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_grid_size", 
      "description": "A positive number in Rhino model units for the size of grid\ncells at which the input _geometry will be subdivided for incident\nradiation analysis. The smaller the grid size, the higher the\nresolution of the analysis and the longer the calculation will take.\nSo it is recommended that one start with a large value here and\ndecrease the value as needed. However, the grid size should usually\nbe smaller than the dimensions of the smallest piece of the _geometry\nand context_ in order to yield meaningful results.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_offset_dist_", 
      "description": "A number for the distance to move points from the surfaces\nof the input _geometry.  Typically, this should be a small positive\nnumber to ensure points are not blocked by the mesh. (Default: 10 cm\nin the equivalent Rhino Model units).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "irradiance_", 
      "description": "Boolean to note whether the study should output units of cumulative\nRadiation (kWh/m2) [False] or units of average Irradiance (W/m2)\n[True].  (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "Optional legend parameters from the \"LB Legend Parameters\"\nthat will be used to customize the display of the results.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_cpu_count_", 
      "description": "An integer to set the number of CPUs used in the execution of the\nintersection calculation. If unspecified, it will automatically default\nto one less than the number of CPUs currently available on the\nmachine or 1 if only one processor is available.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the component and perform incident radiation\nanalysis.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Analyze Geometry", 
  "code": "\nimport math\ntry:  # python 2\n    from itertools import izip as zip\nexcept ImportError:  # python 3\n    pass\n\ntry:\n    from ladybug.viewsphere import view_sphere\n    from ladybug.graphic import GraphicContainer\n    from ladybug.legend import LegendParameters\n    from ladybug.color import Colorset\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.togeometry import to_joined_gridded_mesh3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d, from_point3d, from_vector3d\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.intersect import join_geometry_to_mesh, intersect_mesh_rays\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, hide_output, \\\n        show_output, objectify_output, de_objectify_output, recommended_processor_count\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # set the default offset distance and _cpu_count\n    _offset_dist_ = _offset_dist_ if _offset_dist_ is not None \\\n        else 0.1 / conversion_to_meters()\n    workers = _cpu_count_ if _cpu_count_ is not None else recommended_processor_count()\n\n    # create the gridded mesh from the geometry\n    study_mesh = to_joined_gridded_mesh3d(_geometry, _grid_size)\n    points = [from_point3d(pt.move(vec * _offset_dist_)) for pt, vec in\n              zip(study_mesh.face_centroids, study_mesh.face_normals)]\n    hide_output(ghenv.Component, 1)\n\n    # mesh the geometry and context\n    shade_mesh = join_geometry_to_mesh(_geometry + context_)\n\n    # deconstruct the matrix and get the sky dome vectors\n    mtx = de_objectify_output(_sky_mtx)\n    total_sky_rad = [dir_rad + dif_rad for dir_rad, dif_rad in zip(mtx[1], mtx[2])]\n    ground_rad = [(sum(total_sky_rad) / len(total_sky_rad)) * mtx[0][1]] * len(total_sky_rad)\n    all_rad = total_sky_rad + ground_rad \n    lb_vecs = view_sphere.tregenza_dome_vectors if len(total_sky_rad) == 145 \\\n        else view_sphere.reinhart_dome_vectors\n    if mtx[0][0] != 0:  # there is a north input for sky; rotate vectors\n        north_angle = math.radians(mtx[0][0])\n        lb_vecs = tuple(vec.rotate_xy(north_angle) for vec in lb_vecs)\n    lb_grnd_vecs = tuple(vec.reverse() for vec in lb_vecs)\n    all_vecs = [from_vector3d(vec) for vec in lb_vecs + lb_grnd_vecs]\n\n    # intersect the rays with the mesh\n    normals = [from_vector3d(vec) for vec in study_mesh.face_normals]\n    int_matrix_init, angles = intersect_mesh_rays(\n        shade_mesh, points, all_vecs, normals, cpu_count=workers)\n\n    # compute the results\n    results = []\n    int_matrix = []\n    for int_vals, angs in zip(int_matrix_init, angles):\n        pt_rel = [ival * math.cos(ang) for ival, ang in zip(int_vals, angs)]\n        int_matrix.append(pt_rel)\n        rad_result = sum(r * w for r, w in zip(pt_rel, all_rad))\n        results.append(rad_result)\n\n    # convert to irradiance if requested\n    study_name = 'Incident Radiation'\n    if irradiance_:\n        study_name = 'Incident Irradiance'\n        factor = 1000 / _sky_mtx.wea_duration if hasattr(_sky_mtx, 'wea_duration') \\\n            else 1000 / (((mtx[0][3] - mtx[0][2]).total_seconds() / 3600) + 1)\n        results = [r * factor for r in results]\n\n    # output the intersection matrix and compute total radiation\n    int_mtx = objectify_output('Geometry/Sky Intersection Matrix', int_matrix)\n    unit_conv = conversion_to_meters() ** 2\n    total = 0\n    for rad, area in zip(results, study_mesh.face_areas):\n        total += rad * area * unit_conv\n\n    # create the mesh and legend outputs\n    l_par = legend_par_ if legend_par_ is not None else LegendParameters()\n    if hasattr(_sky_mtx, 'benefit_matrix') and _sky_mtx.benefit_matrix is not None:\n        study_name = '{} Benefit/Harm'.format(study_name)\n        if l_par.are_colors_default:\n            l_par.colors = reversed(Colorset.benefit_harm())\n        if l_par.min is None:\n            l_par.min = min((min(results), -max(results)))\n        if l_par.max is None:\n            l_par.max = max((-min(results), max(results)))\n    graphic = GraphicContainer(results, study_mesh.min, study_mesh.max, l_par)\n    graphic.legend_parameters.title = 'kWh/m2' if not irradiance_ else 'W/m2'\n    title = text_objects(\n        study_name, graphic.lower_title_location,\n        graphic.legend_parameters.text_height * 1.5,\n        graphic.legend_parameters.font)\n\n    # create all of the visual outputs\n    study_mesh.colors = graphic.value_colors\n    mesh = from_mesh3d(study_mesh)\n    legend = legend_objects(graphic.legend)\n", 
  "category": "Ladybug", 
  "name": "LB Incident Radiation", 
  "description": "Calculate the incident radiation on geometry using a sky matrix from the \"Cumulative\nSky Matrix\" component.\n_\nSuch studies of incident radiation can be used to apprxomiate the energy that can\nbe collected from photovoltaic or solar thermal systems. They are also useful\nfor evaluating the impact of a building's orientation on both energy use and the\nsize/cost of cooling systems. For studies of photovoltaic potential or building\nenergy use impact, a sky matrix from EPW radiation should be used. For studies\nof cooling system size/cost, a sky matrix derived from the STAT file's clear sky\nradiation should be used.\n_\nNOTE THAT NO REFLECTIONS OF SOLAR ENERGY ARE INCLUDED\nIN THE ANALYSIS PERFORMED BY THIS COMPONENT.\n_\nGround reflected irradiance is crudely acounted for by means of an emissive\n\"ground hemisphere,\" which is like the sky dome hemisphere and is derived from\nthe ground reflectance that is associated with the connected _sky_mtx. This\nmeans that including geometry that represents the ground surface will effectively\nblock such crude ground reflection.\n_\nAlso note that this component uses the CAD environment's ray intersection methods,\nwhich can be fast for geometries with low complexity but does not scale well for\ncomplex geometries or many test points. For such complex cases and situations\nwhere relfection of solar energy are important, honeybee-radiance should be used.\n-"
}